#!/usr/bin/env python

# Copyright (c) 2014, Robot Control and Pattern Recognition Group, Warsaw University of Technology
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Warsaw University of Technology nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYright HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import roslib
roslib.load_manifest('barrett_hand_controller')

import rospy
import tf

from std_msgs.msg import *
from geometry_msgs.msg import *
from sensor_msgs.msg import *
from barrett_hand_controller_srvs.msg import *
from barrett_hand_controller_srvs.srv import *
from cartesian_trajectory_msgs.msg import *
from visualization_msgs.msg import *
import actionlib
from actionlib_msgs.msg import *
from threading import Lock

import tf
from tf import *
from tf.transformations import * 
import tf_conversions.posemath as pm
from tf2_msgs.msg import *

import PyKDL
import math
from numpy import *
import numpy as np

import copy

from urdf_parser_py.urdf import URDF
from pykdl_utils.kdl_parser import kdl_tree_from_urdf_model

import velmautils

import velma_fk_ik

# reference frames:
# B - robot's base
# W - wrist
# E - gripper
# F - finger distal link
# T - tool

class VelmaSim:
    """
Class for velma robot.
"""
    def calibrateTactileSensors(self):
        pass

    def resetFingers(self):
        # TODO
        pass

    def setMedianFilter(self, samples):
        pass

    def setSavedKinematics(self):
        self.F1_kinematics=[
        [0.00432582582184,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.653729381398,-0.26951418496,-0.269514184961,0.653729381401),PyKDL.Vector(0.119921838723,-1.48167068892e-15,0.0247070333631))],
        [0.0161681575043,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.651460794467,-0.274952420011,-0.274952420012,0.65146079447),PyKDL.Vector(0.119877900583,-5.53051528185e-15,0.0255326759021))],
        [0.0342691308014,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.647928060524,-0.28317702658,-0.283177026581,0.647928060527),PyKDL.Vector(0.11979148634,-1.17432105706e-14,0.0267989290162))],
        [0.0522473856354,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.644323136127,-0.291286278855,-0.291286278856,0.64432313613),PyKDL.Vector(0.11968314963,-1.7899310506e-14,0.0280527180611))],
        [0.0688450577603,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.640873087491,-0.298800411189,-0.29880041119,0.640873087495),PyKDL.Vector(0.119563137035,-2.35785783259e-14,0.0292083266957))],
        [0.0868233125943,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.637059841471,-0.306846473635,-0.306846473636,0.637059841474),PyKDL.Vector(0.119411522796,-2.9720583633e-14,0.0304576212704))],
        [0.104372052808,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.633283457171,-0.314566468128,-0.31456646813,0.633283457174),PyKDL.Vector(0.11924189346,-3.57084153912e-14,0.0316742488839))],
        [0.121583317248,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.629434680117,-0.322198670797,-0.322198670798,0.62943468012),PyKDL.Vector(0.119054813948,-4.15691786548e-14,0.0328644088651))],
        [0.139101377845,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.62540932149,-0.329944208301,-0.329944208302,0.625409321493),PyKDL.Vector(0.118843394426,-4.7524050667e-14,0.0340722943404))],
        [0.156159244207,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.62143258313,-0.337374487213,-0.337374487214,0.621432583133),PyKDL.Vector(0.11861722714,-5.33084860976e-14,0.0352447152252))],
        [0.17429089712,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.6171101675,-0.345217382479,-0.34521738248,0.617110167503),PyKDL.Vector(0.11835447156,-5.94472387982e-14,0.0364886121885))],
        [0.190888569244,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.613038500577,-0.35239721453,-0.352397214531,0.61303850058),PyKDL.Vector(0.118095129821,-6.50330483909e-14,0.0376189178031))],
        [0.208253231763,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.608706304589,-0.359828618582,-0.359828618584,0.608706304592),PyKDL.Vector(0.117803241785,-7.08669234406e-14,0.0387988621323))],
        [0.226170127366,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.604175399374,-0.367385474384,-0.367385474386,0.604175399377),PyKDL.Vector(0.117480642224,-7.68655972205e-14,0.0400108281674))],
        [0.244056343353,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.599541712423,-0.374899633318,-0.37489963332,0.599541712426),PyKDL.Vector(0.117136988875,-8.28217702753e-14,0.0412147602768))],
        [0.260868772788,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.595062903262,-0.381968769874,-0.381968769875,0.595062903265),PyKDL.Vector(0.116794382137,-8.84032430593e-14,0.042340642659))],
        [0.278601590696,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.590274858002,-0.38932710156,-0.389327101561,0.590274858005),PyKDL.Vector(0.116412563429,-9.42631389611e-14,0.043521740864))],
        [0.295751495904,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.585579749217,-0.396353828422,-0.396353828424,0.58557974922),PyKDL.Vector(0.116024143397,-9.98931840024e-14,0.0446553754806))],
        [0.31299343996,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.580722288892,-0.403437260526,-0.403437260528,0.580722288895),PyKDL.Vector(0.115611884951,-1.05543178364e-13,0.0457942729577))],
        [0.330695578252,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.575656217431,-0.410633558456,-0.410633558458,0.575656217434),PyKDL.Vector(0.115170580613,-1.11286847793e-13,0.046949861498))],
        [0.348152279619,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.570634241569,-0.417584197913,-0.417584197915,0.570634241572),PyKDL.Vector(0.114715475902,-1.16927301175e-13,0.0480815887601))],
        [0.366406650994,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.565276127518,-0.424809250907,-0.424809250909,0.565276127521),PyKDL.Vector(0.114216810592,-1.22804544311e-13,0.0492603883204))],
        [0.383127041582,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.56024161529,-0.431427088272,-0.431427088274,0.560241615293),PyKDL.Vector(0.113742019338,-1.28130145383e-13,0.0503301740518))],
        [0.40064510218,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.554893592391,-0.438284269763,-0.438284269765,0.554893592393),PyKDL.Vector(0.113225464314,-1.3367345425e-13,0.0514423145296))],
        [0.41865403663,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.549350204992,-0.445212704528,-0.44521270453,0.549350204995),PyKDL.Vector(0.112674211066,-1.39340795846e-13,0.0525760046704))],
        [0.435374427218,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.544087949894,-0.451628500847,-0.451628500849,0.544087949897),PyKDL.Vector(0.112144199624,-1.44556241977e-13,0.0536195352719))],
        [0.453229963589,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.538371496973,-0.458427890997,-0.458427890999,0.538371496976),PyKDL.Vector(0.111559026959,-1.50074397354e-13,0.0547239583455))],
        [0.470594626108,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.532784654506,-0.464909143727,-0.464909143729,0.532784654508),PyKDL.Vector(0.110971115989,-1.55410406766e-13,0.0557878323686))],
        [0.488787638252,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.526868112766,-0.471603638396,-0.471603638398,0.526868112768),PyKDL.Vector(0.110336531075,-1.60933766313e-13,0.0568894775642))],
        [0.505845504613,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.521168713121,-0.477894520225,-0.477894520228,0.521168713124),PyKDL.Vector(0.109721287548,-1.66091099207e-13,0.0579153093046))],
        [0.522657934048,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.515466975831,-0.484039044732,-0.484039044734,0.515466975834),PyKDL.Vector(0.109098965263,-1.71097511159e-13,0.0589141613904))],
        [0.540789586961,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.509311619645,-0.490511645215,-0.490511645218,0.509311619648),PyKDL.Vector(0.10840909445,-1.76459541423e-13,0.0599794982535))],
        [0.557755414475,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.503465717826,-0.496510091511,-0.496510091513,0.503465717828),PyKDL.Vector(0.107746186722,-1.81420850565e-13,0.0609648571217))],
        [0.575334834304,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.497272868422,-0.502712337554,-0.502712337556,0.497272868425),PyKDL.Vector(0.107041772716,-1.86498386179e-13,0.0619738359712))],
        [0.592638137592,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.49115502309,-0.508691206225,-0.508691206228,0.491155023092),PyKDL.Vector(0.106331207296,-1.91444082809e-13,0.0629547239737))],
        [0.610953868199,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.484657984283,-0.514885072874,-0.514885072876,0.484657984286),PyKDL.Vector(0.105560696382,-1.96630906002e-13,0.0639794436028))],
        [0.627612899556,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.478592182127,-0.520528119514,-0.520528119516,0.478592182129),PyKDL.Vector(0.104843687389,-2.01267821853e-13,0.0648990799169))],
        [0.645315037848,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.472069949641,-0.526450342049,-0.526450342051,0.472069949644),PyKDL.Vector(0.104065108036,-2.06151068438e-13,0.0658630643692))],
        [0.662771739214,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.465628580541,-0.532156015639,-0.532156015642,0.465628580544),PyKDL.Vector(0.103280731425,-2.10902476039e-13,0.0668000402948))],
        [0.679829605575,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.459245284896,-0.53767440733,-0.537674407333,0.459245284899),PyKDL.Vector(0.10249858978,-2.15463064057e-13,0.0677022469336))],
        [0.697255627326,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.452607278938,-0.54327401102,-0.543274011023,0.45260727894),PyKDL.Vector(0.101683795831,-2.2008089795e-13,0.0686100121641))],
        [0.714313493687,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.446090894357,-0.548637324623,-0.548637324625,0.44609089436),PyKDL.Vector(0.100871013749,-2.24554749795e-13,0.0694847164919))],
        [0.732997379683,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.438933942198,-0.554379828623,-0.554379828626,0.4389339422),PyKDL.Vector(0.0999637776964,-2.29342586588e-13,0.0704267367699))],
        [0.750300682971,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.432193955549,-0.559650234329,-0.559650234332,0.432193955551),PyKDL.Vector(0.0991080160338,-2.3369500779e-13,0.0712838928035))],
        [0.766898355096,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.425620439521,-0.564665601449,-0.564665601452,0.425620439523),PyKDL.Vector(0.0982733335012,-2.37851405238e-13,0.072092063212))],
        [0.785122046856,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.418393993148,-0.570040758626,-0.570040758629,0.41839399315),PyKDL.Vector(0.0973415724621,-2.42300970954e-13,0.0729633156112))],
        [0.802456029759,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.411477308082,-0.575053410503,-0.575053410506,0.411477308084),PyKDL.Vector(0.0964423143366,-2.4647124619e-13,0.0737747213745))],
        [0.819084381499,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.404696992774,-0.579845103487,-0.579845103489,0.404696992776),PyKDL.Vector(0.0955617679337,-2.50396925416e-13,0.0745424999671))],
        [0.836694480944,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.397504640845,-0.584799162537,-0.58479916254,0.397504640848),PyKDL.Vector(0.0946205618009,-2.54476995032e-13,0.0753351968993))],
        [0.855255648478,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.38994767647,-0.589865077465,-0.589865077468,0.389947676472),PyKDL.Vector(0.093611833008,-2.58699311972e-13,0.07615406854))],
        [0.872129437145,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.38295189698,-0.594430689481,-0.594430689484,0.382951896982),PyKDL.Vector(0.0926817597327,-2.62449784127e-13,0.0768821357386))],
        [0.889739536589,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.375552755045,-0.59913281347,-0.599132813472,0.375552755047),PyKDL.Vector(0.0916981463349,-2.66295666074e-13,0.0776251242082))],
        [0.906766723335,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.368384425212,-0.6035668275,-0.603566827503,0.368384425214),PyKDL.Vector(0.0907347923815,-2.69912564521e-13,0.0783269416853))],
        [0.924929055864,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.360709695032,-0.608184606766,-0.608184606769,0.360709695034),PyKDL.Vector(0.0896942047645,-2.7370467004e-13,0.0790573508593))],
        [0.942017601841,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.353375146234,-0.612475310541,-0.612475310544,0.353375146235),PyKDL.Vector(0.088703176848,-2.7719840312e-13,0.0797272157905))],
        [0.958737992429,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.346166637608,-0.616578185638,-0.616578185641,0.34616663761),PyKDL.Vector(0.0877225584338,-2.80532541641e-13,0.080366164749))],
        [0.976838965726,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.338369263381,-0.62089148939,-0.620891489392,0.338369263383),PyKDL.Vector(0.0866490921048,-2.84055765021e-13,0.081039282758))],
        [0.995001298254,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.330486701289,-0.625122820147,-0.62512282015,0.330486701291),PyKDL.Vector(0.0855599186128,-2.87483578609e-13,0.0816950428165))],
        [1.01169100923,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.32311945119,-0.628962495114,-0.628962495117,0.323119451192),PyKDL.Vector(0.0845487060621,-2.9057832529e-13,0.0822801027384))],
        [1.02930110867,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.315320086033,-0.632908558436,-0.632908558439,0.315320086035),PyKDL.Vector(0.0834712999026,-2.93725113676e-13,0.0828790377514))],
        [1.04617489734,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.307850691804,-0.636575173529,-0.636575173532,0.307850691806),PyKDL.Vector(0.082429199899,-2.96658531074e-13,0.0834350464972))],
        [1.06341684139,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.300139115314,-0.640247226824,-0.640247226827,0.300139115315),PyKDL.Vector(0.0813548278612,-2.99572866513e-13,0.0839849404393))],
        [1.08093490199,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.292209520839,-0.64390495877,-0.643904958773,0.292209520841),PyKDL.Vector(0.080253706157,-3.02449038037e-13,0.0845245852562))],
        [1.09900519567,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.284078823724,-0.647533182091,-0.647533182094,0.284078823726),PyKDL.Vector(0.0791081491203,-3.05318270666e-13,0.0850609429304))],
        [1.11646189704,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.276213056273,-0.6509272982,-0.650927298203,0.276213056275),PyKDL.Vector(0.0779924604488,-3.07975867031e-13,0.0855593497319))],
        [1.13379587994,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.26826860998,-0.65424150961,-0.654241509613,0.268268609981),PyKDL.Vector(0.0768781567321,-3.10532849435e-13,0.086034083042))],
        [1.15112986285,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.260274321909,-0.657462757388,-0.657462757391,0.260274321911),PyKDL.Vector(0.0757538088484,-3.13003095664e-13,0.0864902552599))],
        [1.16898539922,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.252067063866,-0.660652855372,-0.660652855375,0.252067063867),PyKDL.Vector(0.0745855331314,-3.15462933553e-13,0.0869404574339))],
        [1.18579782865,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.244271504637,-0.663574737328,-0.663574737331,0.244271504638),PyKDL.Vector(0.0734802161604,-3.17676440709e-13,0.0873445179606))],
        [1.20325453002,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.236076901543,-0.666534092568,-0.666534092571,0.236076901544),PyKDL.Vector(0.0723255233225,-3.19886478417e-13,0.0877443366715))],
        [1.22086462946,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.227864119063,-0.66938624369,-0.669386243693,0.227864119064),PyKDL.Vector(0.0711537916843,-3.21985493823e-13,0.088127184096))],
        [1.23856676775,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.219614003634,-0.67213814756,-0.672138147563,0.219614003635),PyKDL.Vector(0.0699693251848,-3.2401512029e-13,0.0884911771522))],
        [1.25565531373,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.211549270794,-0.674719872261,-0.674719872264,0.211549270795),PyKDL.Vector(0.0688199746837,-3.25871274409e-13,0.0888226115847))],
        [1.27277453932,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.203403920171,-0.677219938614,-0.677219938618,0.203403920172),PyKDL.Vector(0.067663050465,-3.27651100696e-13,0.0891348997805))],
        [1.29084483301,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.194847441008,-0.679731178283,-0.679731178286,0.194847441009),PyKDL.Vector(0.0664362438169,-3.29430926982e-13,0.0894430002953))],
        [1.30876172861,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.186327359464,-0.682115910321,-0.682115910324,0.186327359465),PyKDL.Vector(0.065214551638,-3.31054628155e-13,0.0897265498796))],
        [1.32483784727,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.178589303649,-0.684182622273,-0.684182622276,0.17858930365),PyKDL.Vector(0.0641142072331,-3.32421590254e-13,0.0899623012608))],
        [1.34204911171,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.1703108489,-0.686290182608,-0.686290182612,0.170310848901),PyKDL.Vector(0.0629321311375,-3.33819777376e-13,0.0901950578475))],
        [1.36094775501,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.161334259465,-0.688455704254,-0.688455704258,0.161334259466),PyKDL.Vector(0.0616318836471,-3.35235311733e-13,0.0904268011921))],
        [1.3782510583,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.15295122118,-0.690366514206,-0.690366514209,0.152951221181),PyKDL.Vector(0.0604336867185,-3.36414923696e-13,0.0906180480905))],
        [1.39543164312,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.144576572524,-0.692168776148,-0.692168776152,0.144576572525),PyKDL.Vector(0.0592429988437,-3.37507799486e-13,0.090787080731))],
        [1.41313378142,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.136006567727,-0.693903605361,-0.693903605364,0.136006567728),PyKDL.Vector(0.0580133151135,-3.38510469655e-13,0.0909398215477))],
        [1.4292712593,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.128181746894,-0.695391572972,-0.695391572976,0.128181746895),PyKDL.Vector(0.0568901231032,-3.39325789689e-13,0.0910600761098))],
        [1.44694271798,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.119523966964,-0.696931862752,-0.696931862755,0.119523966965),PyKDL.Vector(0.0556581162177,-3.40113354147e-13,0.0911709518415))],
        [1.46473689512,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.110832275119,-0.698366813923,-0.698366813927,0.11083227512),PyKDL.Vector(0.0544157693091,-3.4083846856e-13,0.0912605824583))],
        [1.48274582957,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.102075725611,-0.699700326024,-0.699700326028,0.102075725611),PyKDL.Vector(0.0531570066179,-3.41431743989e-13,0.0913287731139))],
        [1.5003252494,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0934880911584,-0.700899405628,-0.700899405631,0.093488091159),PyKDL.Vector(0.0519272748712,-3.41886241539e-13,0.0913734636242))],
        [1.51713767883,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0851780008532,-0.70195776808,-0.701957768084,0.0851780008538),PyKDL.Vector(0.0507506339986,-3.42208900106e-13,0.0913959752314))],
        [1.53364331211,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0770431389242,-0.702897115332,-0.702897115336,0.0770431389247),PyKDL.Vector(0.0495952563111,-3.42521150332e-13,0.0913988298656))],
        [1.55159088733,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0682419937852,-0.70380610276,-0.703806102763,0.0682419937857),PyKDL.Vector(0.0483390796772,-3.42677275444e-13,0.0913802925378))],
        [1.56910894793,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0595901281261,-0.704591382737,-0.704591382741,0.0595901281265),PyKDL.Vector(0.0471134782202,-3.4275013383e-13,0.091340460336))],
        [1.58662700853,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0508894548231,-0.705273183515,-0.705273183518,0.0508894548235),PyKDL.Vector(0.0458887625635,-3.42708500467e-13,0.0912791651835))],
        [1.60343943796,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.042631014401,-0.705820513026,-0.70582051303,0.0426310144014),PyKDL.Vector(0.0447145603982,-3.42576661483e-13,0.091200172838))],
        [1.6206507024,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0341842866336,-0.706279997271,-0.706279997274,0.0341842866339),PyKDL.Vector(0.0435140533041,-3.42316452961e-13,0.0910988701161))],
        [1.63862895724,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0252570148132,-0.706655561926,-0.706655561929,0.0252570148134),PyKDL.Vector(0.0422621049144,-3.41962569372e-13,0.0909710067459))],
        [1.65556410513,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0168666035209,-0.70690559319,-0.706905593193,0.0168666035212),PyKDL.Vector(0.041087205617,-3.41518480163e-13,0.0908302678685))],
        [1.67351168035,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.00801263725454,-0.707061381806,-0.70706138181,0.00801263725473),PyKDL.Vector(0.0398404781563,-3.40952960309e-13,0.0906588197698))],
        [1.69050818748,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.000417388059608,0.707106657968,0.707106657971,0.000417388059475),PyKDL.Vector(0.0386648442203,-3.40318051517e-13,0.0904761481515))],
        [1.70805692769,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.00915538053892,0.707047508308,0.707047508311,0.00915538053882),PyKDL.Vector(0.0374544523911,-3.39527017612e-13,0.090266604644))],
        [1.72496139598,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0175189591285,0.706889726951,0.706889726954,0.0175189591284),PyKDL.Vector(0.0362900409865,-3.38694350344e-13,0.0900442788865))],
        [1.74352256351,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0266188998218,0.70660557185,0.706605571854,0.0266188998218),PyKDL.Vector(0.0350204555903,-3.37646577364e-13,0.0897784560317))],
        [1.76039635218,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0349820952177,0.706240931278,0.706240931281,0.0349820952177),PyKDL.Vector(0.0338688391987,-3.36605743279e-13,0.0895159720712))],
        [1.77797577201,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0437245051711,0.705753616813,0.705753616817,0.0437245051712),PyKDL.Vector(0.0326739540934,-3.35426131315e-13,0.089221885356))],
        [1.79555519184,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0523771358094,0.705164261461,0.705164261465,0.0523771358095),PyKDL.Vector(0.0314844232223,-3.34149374837e-13,0.0889068397763))],
        [1.81252101935,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0607365929268,0.704493482069,0.704493482072,0.060736592927),PyKDL.Vector(0.0303418334574,-3.32778943291e-13,0.0885830074363))],
        [1.83031519649,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0695568573219,0.70367737181,0.703677371813,0.0695568573221),PyKDL.Vector(0.0291495423361,-3.31262794973e-13,0.0882225891088))],
        [1.847281024,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0778974718964,0.702802948108,0.702802948112,0.0778974718967),PyKDL.Vector(0.0280188969203,-3.29743177208e-13,0.0878592439575))],
        [1.86605694885,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0870379616235,0.701729572723,0.701729572726,0.0870379616237),PyKDL.Vector(0.0267750109111,-3.27932125899e-13,0.0874348383947))],
        [1.88299209675,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0953761716188,0.700644978491,0.700644978495,0.0953761716192),PyKDL.Vector(0.0256600849857,-3.26186994082e-13,0.0870320694257))],
        [1.89971248733,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.103634371023,0.699471169628,0.699471169631,0.103634371023),PyKDL.Vector(0.0245661445759,-3.24362064985e-13,0.0866159412894))],
        [1.91787481986,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.112489447912,0.698101800675,0.698101800679,0.112489447913),PyKDL.Vector(0.0233859309052,-3.2231856073e-13,0.0861432724398))],
        [1.93502472507,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.120828034717,0.696706958501,0.696706958505,0.120828034717),PyKDL.Vector(0.0222815301243,-3.20261178688e-13,0.0856781955857))],
        [1.95251210605,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.129417655866,0.695162621512,0.695162621516,0.129417655867),PyKDL.Vector(0.0211598114383,-3.18071957661e-13,0.0851827839133))],
        [1.96960065203,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.137714358973,0.693566691336,0.693566691339,0.137714358974),PyKDL.Vector(0.0200741202803,-3.15858450506e-13,0.0846806583642))],
        [1.98797774187,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.146571254138,0.691749136218,0.691749136221,0.146571254138),PyKDL.Vector(0.0189163244949,-3.13370857041e-13,0.0841200535482))],
        [2.00472881207,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.154658721133,0.68998599984,0.689985999843,0.154658721133),PyKDL.Vector(0.0178701065202,-3.10997755326e-13,0.0835905937018))],
        [2.02261502806,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.163336742232,0.687983363632,0.687983363635,0.163336742233),PyKDL.Vector(0.0167629507462,-3.0837485343e-13,0.0830059944884))],
        [2.03997969058,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.171671937013,0.685950979327,0.68595097933,0.171671937014),PyKDL.Vector(0.0156982480862,-3.05718991789e-13,0.0824195855086))],
        [2.05746707156,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.180027174415,0.683805686193,0.683805686196,0.180027174416),PyKDL.Vector(0.0146364744827,-3.02971189803e-13,0.0818104383612))],
        [2.07458629715,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.188251903788,0.681587280337,0.681587280341,0.188251903789),PyKDL.Vector(0.013607526904,-3.00176550283e-13,0.0811962197965))],
        [2.09155212467,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.196387207972,0.679287909905,0.679287909908,0.196387207973),PyKDL.Vector(0.0125983206871,-2.97321195442e-13,0.0805702153501))],
        [2.10999057374,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.205071266971,0.676716909394,0.676716909398,0.205071266972),PyKDL.Vector(0.0115119393309,-2.94127569522e-13,0.0798693867415))],
        [2.12707911971,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.213120664456,0.674225171867,0.674225171871,0.213120664457),PyKDL.Vector(0.0105184506296,-2.91070986758e-13,0.0792031768964))],
        [2.14490397647,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.221539507325,0.671505954323,0.671505954327,0.221539507326),PyKDL.Vector(0.00949794691475,-2.87804502452e-13,0.0784927639538))],
        [2.16214592052,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.229654495888,0.668774111727,0.66877411173,0.229654495889),PyKDL.Vector(0.00851789573522,-2.84558834829e-13,0.0777847056015))],
        [2.17963330151,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.237799553108,0.665921446222,0.665921446226,0.237799553109),PyKDL.Vector(0.00753656046755,-2.81163980986e-13,0.0770494052356))],
        [2.19632301248,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.245577213937,0.663092627008,0.663092627011,0.245577213938),PyKDL.Vector(0.00661543032175,-2.77862802212e-13,0.076334316359))],
        [2.21482282078,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.254155084804,0.659852402334,0.659852402337,0.254155084806),PyKDL.Vector(0.00560829826057,-2.74098452269e-13,0.0755237176908))],
        [2.23212612407,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.262114883915,0.656731138007,0.65673113801,0.262114883916),PyKDL.Vector(0.00467519797992,-2.70485023268e-13,0.074744749712))],
        [2.2497055439,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.270130591563,0.653474914208,0.653474914211,0.270130591564),PyKDL.Vector(0.00374447984651,-2.66757102518e-13,0.0739397645154))],
        [2.26676341026,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.277937509208,0.650192849063,0.650192849066,0.277937509209),PyKDL.Vector(0.00285662384784,-2.63046529003e-13,0.0731445850788))],
        [2.28326904354,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.285480303903,0.646916529454,0.646916529457,0.285480303904),PyKDL.Vector(0.00200900711108,-2.59379323575e-13,0.0723594407498))],
        [2.30152341491,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.293690747526,0.643230708856,0.643230708859,0.293690747527),PyKDL.Vector(0.00108682182307,-2.55250681702e-13,0.0714749538256))],
        [2.31910283474,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.301573444144,0.639572871364,0.639572871367,0.301573444145),PyKDL.Vector(0.000214136298157,-2.51181020428e-13,0.0706073955363))],
        [2.33597662341,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.309153469973,0.635943497491,0.635943497494,0.309153469974),PyKDL.Vector(-0.000609052028162,-2.47224116179e-13,0.0697603541427))],
        [2.35462982979,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.317405737029,0.631865173988,0.631865173991,0.317405737031),PyKDL.Vector(-0.00150227112901,-2.42746794887e-13,0.0688079747358))],
        [2.37196381269,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.324980513453,0.628002918682,0.628002918685,0.324980513455),PyKDL.Vector(-0.00231626182899,-2.38510600159e-13,0.0679081578676))],
        [2.3887148829,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.332361636877,0.624127985537,0.62412798554,0.332361636878),PyKDL.Vector(-0.00308794705628,-2.34362876328e-13,0.0670253205726))],
        [2.39190556293,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.333763961685,0.623379192689,0.623379192692,0.333763961687),PyKDL.Vector(-0.00323325237981,-2.33563168806e-13,0.0668557019643))]
        ]
        self.F2_kinematics=[
        [0.00420310735881,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.653751208335,-0.269461235797,-0.269461235799,0.653751208339),PyKDL.Vector(0.11992224403,-1.43992890528e-15,0.0246984526376))],
        [0.0163215555831,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.651429410408,-0.275026768249,-0.27502676825,0.651429410411),PyKDL.Vector(0.119877138666,-5.59426636959e-15,0.0255455387948))],
        [0.0342691308014,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.647935705519,-0.283159533675,-0.283159533676,0.647935705522),PyKDL.Vector(0.11979148634,-1.17432105706e-14,0.0267989290162))],
        [0.0524621429457,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.644286848731,-0.291366532995,-0.291366532997,0.644286848734),PyKDL.Vector(0.119681719304,-1.79734699346e-14,0.0280676828733))],
        [0.0695506889227,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.640737532141,-0.299090980979,-0.29909098098,0.640737532145),PyKDL.Vector(0.119557609919,-2.38190543678e-14,0.029257410665))],
        [0.0869767106731,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.637043083722,-0.306881262835,-0.306881262836,0.637043083726),PyKDL.Vector(0.119410132558,-2.97747937417e-14,0.030468268758))],
        [0.104372052808,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.633285001288,-0.314563359502,-0.314563359503,0.633285001291),PyKDL.Vector(0.11924189346,-3.57084153912e-14,0.0316742488839))],
        [0.121982152253,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.629347471979,-0.32236898038,-0.322368980381,0.629347471982),PyKDL.Vector(0.119050236048,-4.17057881286e-14,0.0328919494296))],
        [0.138855940919,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.625472474813,-0.329824473393,-0.329824473394,0.625472474816),PyKDL.Vector(0.118846502602,-4.74420849828e-14,0.0340553972478))],
        [0.156864875369,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.621290311782,-0.337636414629,-0.337636414631,0.621290311785),PyKDL.Vector(0.118607440795,-5.35461432138e-14,0.0352931302282))],
        [0.173677304804,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.617266852703,-0.3449371429,-0.344937142901,0.617266852706),PyKDL.Vector(0.118363716948,-5.92416740663e-14,0.0364466675723))],
        [0.191747598486,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.612841204462,-0.352740213346,-0.352740213347,0.612841204465),PyKDL.Vector(0.118081172173,-6.53184104027e-14,0.0376774075194))],
        [0.209173620236,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.608489380213,-0.360195327795,-0.360195327797,0.608489380216),PyKDL.Vector(0.117787199356,-7.11722347724e-14,0.0388612600763))],
        [0.226568962371,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.604078445637,-0.367544870069,-0.367544870071,0.60407844564),PyKDL.Vector(0.117472642377,-7.70026403751e-14,0.0400398103722))],
        [0.244179061816,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.599506744415,-0.374955548564,-0.374955548566,0.599506744418),PyKDL.Vector(0.117134556732,-8.28634036387e-14,0.0412229990756))],
        [0.26135964664,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.594940998961,-0.38215861596,-0.382158615962,0.594940998964),PyKDL.Vector(0.116784094876,-8.85619702573e-14,0.0423734277504))],
        [0.278724309159,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.590258613096,-0.389351730013,-0.389351730014,0.590258613099),PyKDL.Vector(0.116409848182,-9.43039049628e-14,0.0435298907451))],
        [0.296610525146,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.585354695221,-0.396686123755,-0.396686123757,0.585354695224),PyKDL.Vector(0.116003426754,-1.00188954355e-13,0.0447141085337))],
        [0.31320819727,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.580688373038,-0.403486075863,-0.403486075865,0.580688373041),PyKDL.Vector(0.115608142145,-1.05598689515e-13,0.0458043374077))],
        [0.331309170568,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.575502984726,-0.41084828656,-0.410848286562,0.575502984728),PyKDL.Vector(0.115154891147,-1.11488943078e-13,0.0469898448533))],
        [0.34922606617,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.570354570667,-0.41796610355,-0.417966103552,0.57035457067),PyKDL.Vector(0.114686788267,-1.17268174338e-13,0.0481510639723))],
        [0.366253252916,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.565314702821,-0.42475791549,-0.424757915492,0.565314702824),PyKDL.Vector(0.114220229093,-1.22758574139e-13,0.0492525075223))],
        [0.383464517356,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.560139417524,-0.431559767511,-0.431559767513,0.560139417526),PyKDL.Vector(0.113733140672,-1.28227289897e-13,0.0503497284966))],
        [0.400737141027,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.554887406994,-0.438292100723,-0.438292100725,0.554887406997),PyKDL.Vector(0.113222698986,-1.33716822337e-13,0.0514481336012))],
        [0.418746075477,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.5493384581,-0.445227198687,-0.445227198689,0.549338458102),PyKDL.Vector(0.112671341397,-1.39368551422e-13,0.0525817730004))],
        [0.435589184528,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.544028365268,-0.451700274277,-0.451700274279,0.54402836527),PyKDL.Vector(0.11213727881,-1.44620426745e-13,0.05363288045))],
        [0.453199283973,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.538412281578,-0.458379989794,-0.458379989796,0.538412281581),PyKDL.Vector(0.111560049297,-1.50069193183e-13,0.0547220697225))],
        [0.471392296117,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.532555807733,-0.465171271305,-0.465171271307,0.532555807735),PyKDL.Vector(0.110943666452,-1.55655002776e-13,0.055836456254))],
        [0.488818317868,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.526851328835,-0.471622388466,-0.471622388469,0.526851328837),PyKDL.Vector(0.110334353355,-1.60952848272e-13,0.0568931797006))],
        [0.50593754346,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.521145547149,-0.477919782688,-0.47791978269,0.521145547151),PyKDL.Vector(0.109717926468,-1.66106711719e-13,0.0579208058283))],
        [0.522749972896,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.515466084822,-0.484039993591,-0.484039993593,0.515466084825),PyKDL.Vector(0.109095512253,-1.71123532011e-13,0.0589196006321))],
        [0.540973664656,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.509273695377,-0.490551019971,-0.490551019973,0.50927369538),PyKDL.Vector(0.108401991836,-1.76516787298e-13,0.0599902494113))],
        [0.55815424948,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.503336222428,-0.496641366772,-0.496641366774,0.503336222431),PyKDL.Vector(0.10773040228,-1.8152840342e-13,0.0609878851749))],
        [0.575242795457,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.497330855674,-0.502654971121,-0.502654971123,0.497330855676),PyKDL.Vector(0.107046751445,-1.86453283368e-13,0.061966835587))],
        [0.592730176439,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.491154086702,-0.508692110331,-0.508692110334,0.491154086705),PyKDL.Vector(0.106327382409,-1.91470103661e-13,0.062959908457))],
        [0.611076586662,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.48461248854,-0.514927893931,-0.514927893934,0.484612488542),PyKDL.Vector(0.10555547068,-1.96660396301e-13,0.0639862616055))],
        [0.628287851102,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.47835642173,-0.520744787576,-0.520744787578,0.478356421733),PyKDL.Vector(0.104814315127,-2.01451702542e-13,0.0649360868375))],
        [0.645345717463,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.472082547515,-0.526439045217,-0.526439045219,0.472082547518),PyKDL.Vector(0.1040637439,-2.06159742056e-13,0.0658647230451))],
        [0.662771739214,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.465665150448,-0.532124015297,-0.5321240153,0.46566515045),PyKDL.Vector(0.103280731425,-2.10902476039e-13,0.0668000402948))],
        [0.680504557122,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.459011003176,-0.537874426759,-0.537874426762,0.459011003178),PyKDL.Vector(0.102467326051,-2.15650414193e-13,0.0677376703886))],
        [0.697194268094,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.452659945915,-0.543230129284,-0.543230129287,0.452659945917),PyKDL.Vector(0.101686692503,-2.20067020162e-13,0.0686068407972))],
        [0.714927086002,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.44588753338,-0.548802612579,-0.548802612582,0.445887533382),PyKDL.Vector(0.100841499762,-2.24691792949e-13,0.0695159215012))],
        [0.732383787368,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.439178816861,-0.554185859453,-0.554185859456,0.439178816864),PyKDL.Vector(0.0999938507178,-2.29191665646e-13,0.0703960701527))],
        [0.750607479128,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.432076504231,-0.55974091729,-0.559740917293,0.432076504234),PyKDL.Vector(0.0990927095363,-2.3378521341e-13,0.0712989566062))],
        [0.767665345489,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.425331770701,-0.564883071821,-0.564883071824,0.425331770703),PyKDL.Vector(0.0982344389805,-2.38026612309e-13,0.072129073481))],
        [0.784784571082,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.418546129336,-0.56992906367,-0.569929063672,0.418546129338),PyKDL.Vector(0.0973589711357,-2.42203826439e-13,0.0729473360414))],
        [0.802732146301,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.41138203338,-0.575121572026,-0.575121572029,0.411382033382),PyKDL.Vector(0.0964262437879,-2.46518083724e-13,0.073788967233))],
        [0.819483216504,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.404579218435,-0.579927285104,-0.579927285107,0.404579218437),PyKDL.Vector(0.0955438310333,-2.50481926867e-13,0.0745578729335))],
        [0.837338752875,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.397278908262,-0.584952535722,-0.584952535725,0.397278908264),PyKDL.Vector(0.0945858036092,-2.54622711804e-13,0.075363933479))],
        [0.854764774626,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.390173496369,-0.58971573044,-0.589715730443,0.390173496371),PyKDL.Vector(0.0936387050931,-2.58577881329e-13,0.0761326540357))],
        [0.872221475992,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.382927459203,-0.594446432394,-0.594446432397,0.382927459205),PyKDL.Vector(0.0926766530401,-2.62453253574e-13,0.0768860638836))],
        [0.889831575437,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.375516359646,-0.599155625556,-0.599155625559,0.375516359648),PyKDL.Vector(0.0916929712627,-2.6629393135e-13,0.0776289618194))],
        [0.907564393345,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.368082919286,-0.60375074702,-0.603750747023,0.368082919288),PyKDL.Vector(0.0906893705128,-2.70092975763e-13,0.0783594164934))],
        [0.924714298553,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.360824254094,-0.608116648066,-0.608116648069,0.360824254096),PyKDL.Vector(0.0897065861867,-2.736647714e-13,0.0790488249091))],
        [0.942109640688,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.353355979743,-0.612486368483,-0.612486368486,0.353355979745),PyKDL.Vector(0.0886978083143,-2.77231362866e-13,0.0797307777393))],
        [0.959228866281,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.345983511769,-0.616680962558,-0.616680962561,0.345983511771),PyKDL.Vector(0.0876936089417,-2.80634890326e-13,0.0803846746617))],
        [0.977207121115,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.338235152555,-0.620964557421,-0.620964557424,0.338235152557),PyKDL.Vector(0.0866271330983,-2.8412515396e-13,0.0810527712768))],
        [0.994203628244,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.330832631298,-0.624939813155,-0.624939813158,0.3308326313),PyKDL.Vector(0.0856080028421,-2.87330922943e-13,0.0816666585567))],
        [1.01208984423,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.32296005315,-0.629044357789,-0.629044357792,0.322960053152),PyKDL.Vector(0.0845244221988,-2.90637305889e-13,0.0822938771293))],
        [1.02914771059,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.315416780962,-0.632860375032,-0.632860375035,0.315416780964),PyKDL.Vector(0.083480730275,-2.93678276142e-13,0.0828739025949))],
        [1.04752480043,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.307283421933,-0.636849196123,-0.636849196126,0.307283421935),PyKDL.Vector(0.0823454290764,-2.96887514573e-13,0.0834787662399))],
        [1.06470538526,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.299580367329,-0.640508862943,-0.640508862946,0.299580367331),PyKDL.Vector(0.0812741584127,-2.99784502777e-13,0.0840252905428))],
        [1.081732572,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.291881553997,-0.644053692198,-0.644053692201,0.291881553999),PyKDL.Vector(0.080203343949,-3.02584346468e-13,0.0845486976453))],
        [1.09940403068,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.283946907131,-0.647591039104,-0.647591039108,0.283946907132),PyKDL.Vector(0.079084710029,-3.05373781817e-13,0.0850716549379))],
        [1.11689141166,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.276015738017,-0.651010992507,-0.65101099251,0.276015738019),PyKDL.Vector(0.0779649004889,-3.08041786523e-13,0.0855713669844))],
        [1.13367316148,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.268309957513,-0.654224553725,-0.654224553728,0.268309957514),PyKDL.Vector(0.0768841054647,-3.10501624412e-13,0.0860316089337))],
        [1.15168209593,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.260043956491,-0.65755390706,-0.657553907063,0.260043956492),PyKDL.Vector(0.0757158625387,-3.13086362391e-13,0.0865052564229))],
        [1.16950695268,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.251849365683,-0.660735875371,-0.660735875374,0.251849365684),PyKDL.Vector(0.0745513469362,-3.15521914152e-13,0.0869532711893))],
        [1.18677957636,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.243812164767,-0.66374364653,-0.663743646533,0.243812164768),PyKDL.Vector(0.0734154639763,-3.17787463011e-13,0.0873675378256))],
        [1.20411355926,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.235725145721,-0.666658575039,-0.666658575042,0.235725145722),PyKDL.Vector(0.072268523367,-3.19952397909e-13,0.0877634904677))],
        [1.22144754216,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.227642722997,-0.669461567727,-0.669461567731,0.227642722999),PyKDL.Vector(0.0711148919696,-3.22054882762e-13,0.0881395035725))],
        [1.23872016583,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.219555851761,-0.672157145283,-0.672157145286,0.219555851762),PyKDL.Vector(0.0699590332922,-3.24039406419e-13,0.0884942396189))],
        [1.25654502259,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.211139782971,-0.674848125169,-0.674848125173,0.211139782972),PyKDL.Vector(0.0687599807482,-3.2596148003e-13,0.0888393291954))],
        [1.27323473356,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.20321027164,-0.67727807103,-0.677278071033,0.203210271641),PyKDL.Vector(0.0676339557068,-3.27678856271e-13,0.0891424800707))],
        [1.29130502724,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.194625545227,-0.679794746334,-0.679794746337,0.194625545228),PyKDL.Vector(0.0664028413084,-3.29472560345e-13,0.0894510602196))],
        [1.30903784515,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.186211420894,-0.682147569611,-0.682147569614,0.186211420895),PyKDL.Vector(0.0651956849676,-3.31089322625e-13,0.0897307482643))],
        [1.32627978921,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.17791794289,-0.684357512997,-0.684357513,0.177917942891),PyKDL.Vector(0.0640153297365,-3.32567307026e-13,0.0899825818439))],
        [1.34361377211,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.169608782259,-0.686464027447,-0.68646402745,0.16960878226),PyKDL.Vector(0.0628244744484,-3.33941208019e-13,0.0902152080221))],
        [1.36110115309,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.161245125145,-0.688476586105,-0.688476586108,0.161245125146),PyKDL.Vector(0.0616170593689,-3.35217964498e-13,0.0904292976324))],
        [1.37880329138,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.152684339499,-0.690425587931,-0.690425587934,0.1526843395),PyKDL.Vector(0.0603954606334,-3.36449618166e-13,0.0906237993628))],
        [1.39546232274,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.144571051297,-0.69216992937,-0.692169929374,0.144571051298),PyKDL.Vector(0.0592408700704,-3.3751473838e-13,0.09078736427))],
        [1.41359397565,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.135824757598,-0.693939215797,-0.6939392158,0.135824757599),PyKDL.Vector(0.0579813124411,-3.38562511359e-13,0.0909435018655))],
        [1.43052912355,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.127590739287,-0.695500253951,-0.695500253954,0.127590739288),PyKDL.Vector(0.0568024947563,-3.3938130084e-13,0.0910686878382))],
        [1.44850737838,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.11878537947,-0.697058127864,-0.697058127868,0.118785379471),PyKDL.Vector(0.0555489414906,-3.40203559768e-13,0.091179719463))],
        [1.46593340014,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.110268745151,-0.698456014249,-0.698456014252,0.110268745151),PyKDL.Vector(0.054332177631,-3.40880101923e-13,0.0912658159401))],
        [1.48369689766,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.101622760321,-0.699766257105,-0.699766257108,0.101622760322),PyKDL.Vector(0.0530904981756,-3.41462969011e-13,0.0913317440153))],
        [1.5007240844,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0932743437696,-0.700927882733,-0.700927882736,0.0932743437702),PyKDL.Vector(0.0518993668519,-3.41927874903e-13,0.0913742267236))],
        [1.51802738769,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0847537301682,-0.702009120468,-0.702009120471,0.0847537301688),PyKDL.Vector(0.0506883576706,-3.42288697386e-13,0.0913966153733))],
        [1.5351772929,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0763331926775,-0.702974568312,-0.702974568315,0.076333192678),PyKDL.Vector(0.0494878799692,-3.42524619779e-13,0.0913981266397))],
        [1.55333962543,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0674244558543,-0.703884893111,-0.703884893115,0.0674244558548),PyKDL.Vector(0.0482167050755,-3.4270503102e-13,0.0913772810219))],
        [1.57018273448,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0590734755832,-0.704634887357,-0.70463488736,0.0590734755836),PyKDL.Vector(0.0470383787731,-3.42743194937e-13,0.0913373205071))],
        [1.58806895047,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0502165051914,-0.705321417939,-0.705321417943,0.0502165051918),PyKDL.Vector(0.0457880051734,-3.42715439361e-13,0.0912731643736))],
        [1.60595516645,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0414486302465,-0.705890934244,-0.705890934248,0.0414486302469),PyKDL.Vector(0.0445389790253,-3.42528089226e-13,0.0911866552423))],
        [1.62328914936,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0328901931965,-0.706341443771,-0.706341443775,0.0328901931968),PyKDL.Vector(0.0433301793214,-3.42274819598e-13,0.0910815147088))],
        [1.64022429725,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0244596114043,-0.706683611956,-0.70668361196,0.0244596114045),PyKDL.Vector(0.0421532594312,-3.41913997115e-13,0.0909588144123))],
        [1.65737420246,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0159782666701,-0.706926230233,-0.706926230237,0.0159782666703),PyKDL.Vector(0.040959415153,-3.41462969011e-13,0.0908137437805))],
        [1.67541381653,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.00709938198427,-0.707071141239,-0.707071141242,0.00709938198445),PyKDL.Vector(0.0397108811504,-3.40887040817e-13,0.0906396853928))],
        [1.69225692558,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.00128383632652,0.707105615723,0.707105615726,0.00128383632631),PyKDL.Vector(0.0385440655219,-3.40210498662e-13,0.0904562203225))],
        [1.7102045008,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0101766274454,0.707033546765,0.707033546769,0.0101766274453),PyKDL.Vector(0.0373065853674,-3.39422934204e-13,0.0902395033753))],
        [1.72784527986,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0188656957518,0.706855066843,0.706855066846,0.0188656957518),PyKDL.Vector(0.0360942409077,-3.38517408549e-13,0.0900048822174))],
        [1.74542469969,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0275510470481,0.706569840712,0.706569840716,0.0275510470481),PyKDL.Vector(0.0348904176327,-3.37552902296e-13,0.0897498392148))],
        [1.76242120682,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0359796178957,0.706190814932,0.706190814935,0.0359796178958),PyKDL.Vector(0.03373094742,-3.36484312635e-13,0.0894831691988))],
        [1.77926431587,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0443316180012,0.705715741388,0.705715741392,0.0443316180012),PyKDL.Vector(0.0325865770272,-3.35318578459e-13,0.0891995036882))],
        [1.79736528917,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0532316467998,0.705100270725,0.705100270729,0.0532316467999),PyKDL.Vector(0.0313622596713,-3.33979371936e-13,0.0888732142071))],
        [1.81448451476,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0616771619177,0.704411760049,0.704411760052,0.0616771619178),PyKDL.Vector(0.0302099579098,-3.32626287625e-13,0.0885442792356))],
        [1.83184917728,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.070284785924,0.70360503755,0.703605037553,0.0702847859242),PyKDL.Vector(0.02904706234,-3.31130955988e-13,0.0881905262999))],
        [1.84991947096,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0791487902248,0.702663126259,0.702663126262,0.079148790225),PyKDL.Vector(0.0278436244435,-3.29486438133e-13,0.0878010167257))],
        [1.86759092964,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0877914190785,0.701635707995,0.701635707999,0.0877914190788),PyKDL.Vector(0.0266737421027,-3.27762122998e-13,0.0873991340285))],
        [1.88483287369,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.0962840619894,0.700520791558,0.700520791561,0.0962840619897),PyKDL.Vector(0.025539312291,-3.25978827265e-13,0.0869871539008))],
        [1.90186006044,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.104654874479,0.699319209836,0.699319209839,0.10465487448),PyKDL.Vector(0.0244261473335,-3.24129612039e-13,0.0865611698774))],
        [1.91943948027,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.113200021992,0.697986930407,0.69798693041,0.113200021992),PyKDL.Vector(0.0232846622895,-3.22124271701e-13,0.0861015512257))],
        [1.93723365741,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.121888079621,0.696522286825,0.696522286828,0.121888079622),PyKDL.Vector(0.0221396116796,-3.2000790906e-13,0.0856168105922))],
        [1.95410744607,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.13016147862,0.695023733034,0.695023733038,0.13016147862),PyKDL.Vector(0.0210580929545,-3.17874199185e-13,0.0851366928587))],
        [1.97202434167,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.138854266906,0.693339377621,0.693339377624,0.138854266907),PyKDL.Vector(0.0199208356504,-3.15532322492e-13,0.0846079415266))],
        [1.98914356727,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.147115356139,0.691633625546,0.691633625549,0.14711535614),PyKDL.Vector(0.0188432250037,-3.13193915247e-13,0.0840837727951))],
        [2.0071218221,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.155814304,0.689725962007,0.689725962011,0.155814304),PyKDL.Vector(0.0177213759436,-3.10645606461e-13,0.0835135285508))],
        [2.02417968846,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.164079193507,0.687806672151,0.687806672154,0.164079193508),PyKDL.Vector(0.0166665990102,-3.08126787973e-13,0.082953914404))],
        [2.04136027329,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.172320458213,0.68578834904,0.685788349043,0.172320458214),PyKDL.Vector(0.015614038218,-3.05491743013e-13,0.0823721709662))],
        [2.05955328543,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.18100209012,0.683548274352,0.683548274356,0.18100209012),PyKDL.Vector(0.0145105224358,-3.02627714555e-13,0.0817365310754))],
        [2.0762429964,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.189020466233,0.681374539693,0.681374539697,0.189020466234),PyKDL.Vector(0.0135085125391,-2.99898994527e-13,0.0811358463813))],
        [2.09412921239,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.197536893325,0.678954472533,0.678954472537,0.197536893325),PyKDL.Vector(0.0124477705936,-2.9690139236e-13,0.0804747836781))],
        [2.11152455452,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.205734287996,0.676515633774,0.676515633777,0.205734287997),PyKDL.Vector(0.0114240857563,-2.93855217937e-13,0.0798114615487))],
        [2.12931873166,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.214161277726,0.673895353241,0.673895353245,0.214161277727),PyKDL.Vector(0.0103908637497,-2.90677204529e-13,0.0791158238744))],
        [2.14597776302,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.222068486181,0.671331205474,0.671331205477,0.222068486182),PyKDL.Vector(0.00943491460451,-2.87584192571e-13,0.0784479959933))],
        [2.16401737709,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.230505385252,0.66848131415,0.668481314153,0.230505385253),PyKDL.Vector(0.00841071945518,-2.84185869281e-13,0.0777056990345))],
        [2.18116728229,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.238478121199,0.665678740615,0.665678740618,0.2384781212),PyKDL.Vector(0.0074529506648,-2.80855200208e-13,0.0769855070398))],
        [2.1989001002,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.246749831083,0.662657166911,0.662657166914,0.246749831084),PyKDL.Vector(0.00647568594126,-2.77351058786e-13,0.0762236635561))],
        [2.21605000541,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.254707657291,0.659639302433,0.659639302437,0.254707657292),PyKDL.Vector(0.00554025310794,-2.73846917365e-13,0.0754678361532))],
        [2.23353738639,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.262718012127,0.656490095966,0.65649009597,0.262718012128),PyKDL.Vector(0.00460159435897,-2.70193589724e-13,0.0746821242562))],
        [2.25130088392,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.270853369942,0.653175667021,0.653175667024,0.270853369944),PyKDL.Vector(0.00366232961139,-2.66401484206e-13,0.0738673260511))],
        [2.26869622605,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.278811364536,0.649818607769,0.649818607772,0.278811364538),PyKDL.Vector(0.00275669921742,-2.62612848134e-13,0.0730533690205))],
        [2.28563137395,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.286501282063,0.64646501481,0.646465014814,0.286501282064),PyKDL.Vector(0.00188875809564,-2.58851967638e-13,0.072245928081))],
        [2.30385506571,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.294696036436,0.64277075704,0.642770757044,0.294696036438),PyKDL.Vector(0.00097019758336,-2.54711182701e-13,0.0713607693594))],
        [2.32054477668,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.302207081723,0.639273712704,0.639273712707,0.302207081724),PyKDL.Vector(0.000143233872623,-2.5084274935e-13,0.0705355560803))],
        [2.33827759459,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.310160993805,0.63545271887,0.635452718873,0.310160993806),PyKDL.Vector(-0.000720193737243,-2.46674208837e-13,0.0696437762541))],
        [2.35579565519,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.317887177671,0.631623101438,0.631623101441,0.317887177672),PyKDL.Vector(-0.00155750553792,-2.42462300237e-13,0.0687478998764))],
        [2.37377391002,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.325781366028,0.627587843689,0.627587843692,0.325781366029),PyKDL.Vector(-0.00240036036954,-2.38078654013e-13,0.0678133842026))],
        [2.3896966306,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.332787411148,0.623901065057,0.62390106506,0.33278741115),PyKDL.Vector(-0.00313271401897,-2.341096067e-13,0.0669731796233))],
        [2.39153740755,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.333600239886,0.623466823452,0.623466823455,0.333600239887),PyKDL.Vector(-0.00321651401097,-2.33649904979e-13,0.0668752969921))]
        ]
        self.F3_kinematics=[
        [0.00414174812729,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.652800775733,0.271755675562,-0.652800775734,0.271755675567),PyKDL.Vector(3.40939082522e-13,-0.119922446289,0.0834907622562))],
        [0.0162295167358,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.65507567983,0.266225193572,-0.655075679832,0.266225193577),PyKDL.Vector(3.36571048809e-13,-0.119877392901,0.0843378511795))],
        [0.0343304900329,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.658385973284,0.257930049006,-0.658385973286,0.257930049011),PyKDL.Vector(3.299790996e-13,-0.119791154934,0.085599811358))],
        [0.0520939875566,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.661553549032,0.249693615778,-0.661553549034,0.249693615782),PyKDL.Vector(3.23373272604e-13,-0.119684169325,0.0868386287216))],
        [0.0689984558391,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.664451432417,0.241876608948,-0.664451432419,0.241876608953),PyKDL.Vector(3.1699816383e-13,-0.119561938435,0.0880155974554))],
        [0.0863017591264,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.667340339824,0.233788089604,-0.667340339826,0.233788089609),PyKDL.Vector(3.10354172917e-13,-0.119416237389,0.0892180182197))],
        [0.103451664335,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.670117355506,0.225704961947,-0.670117355508,0.225704961951),PyKDL.Vector(3.03718855621e-13,-0.119251320431,0.0904071151006))],
        [0.121399239553,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.672890664222,0.217297386087,-0.672890664224,0.217297386091),PyKDL.Vector(2.96632510222e-13,-0.11905692312,0.09164829722))],
        [0.13907069823,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.675518368396,0.208985487433,-0.675518368398,0.208985487438),PyKDL.Vector(2.89613819038e-13,-0.118843783175,0.0928667822456))],
        [0.156404681133,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.678001161396,0.200784524163,-0.678001161398,0.200784524167),PyKDL.Vector(2.82576045896e-13,-0.118613827069,0.0940581560094))],
        [0.173677304804,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.68037848882,0.19257495151,-0.680378488822,0.192574951514),PyKDL.Vector(2.75527864413e-13,-0.118364178542,0.0952411701927))],
        [0.191287404249,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.682692935071,0.18420194462,-0.682692935073,0.184201944624),PyKDL.Vector(2.68233352196e-13,-0.118088655733,0.0964426752338))],
        [0.208652066768,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.684887944718,0.175865014079,-0.684887944721,0.175865014083),PyKDL.Vector(2.6097873862e-13,-0.117796297117,0.0976225030541))],
        [0.225648573898,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.686943309445,0.167657059517,-0.686943309448,0.167657059521),PyKDL.Vector(2.53786575088e-13,-0.117490339587,0.0987722308748))],
        [0.242583721796,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.688883677211,0.159496956929,-0.688883677214,0.159496956933),PyKDL.Vector(2.465458393e-13,-0.11716609571,0.0999124714502))],
        [0.260899452404,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.690861653181,0.150698958729,-0.690861653183,0.150698958733),PyKDL.Vector(2.38649378037e-13,-0.116794382137,0.101137242659))],
        [0.278632270312,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.692681183117,0.142101296805,-0.692681183119,0.14210129681),PyKDL.Vector(2.30938532186e-13,-0.116411884711,0.102320378366))],
        [0.295598097826,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.694325979513,0.133833606282,-0.694325979516,0.133833606286),PyKDL.Vector(2.23453200388e-13,-0.116026996763,0.103443872924))],
        [0.313116158423,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.695907044928,0.125353040716,-0.695907044931,0.12535304072),PyKDL.Vector(2.1569898645e-13,-0.115609639453,0.104596911697))],
        [0.330081985937,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.69734563158,0.117085738303,-0.697345631583,0.117085738307),PyKDL.Vector(2.08097428178e-13,-0.115186245542,0.105706468523))],
        [0.347508007688,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.69872861307,0.108527993045,-0.698728613073,0.108527993049),PyKDL.Vector(2.00240865555e-13,-0.114731835336,0.106838474821))],
        [0.365118107133,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.700014059363,0.0999015349841,-0.700014059366,0.0999015349882),PyKDL.Vector(1.92242055608e-13,-0.114252656604,0.107974219037))],
        [0.382482769651,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.701171486039,0.0914250904491,-0.701171486042,0.0914250904531),PyKDL.Vector(1.84293552641e-13,-0.113760645007,0.109085700856))],
        [0.400062189481,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.702243105176,0.0827926399519,-0.702243105179,0.0827926399559),PyKDL.Vector(1.76147291198e-13,-0.113242965618,0.110202054502))],
        [0.417518890847,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.703206630187,0.0741649193288,-0.70320663019,0.0741649193328),PyKDL.Vector(1.68105113163e-13,-0.112709559989,0.111301440233))],
        [0.435036951444,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.70406086173,0.0655614442898,-0.704060861733,0.0655614442937),PyKDL.Vector(1.59910279462e-13,-0.112155069397,0.112395161276))],
        [0.452555012042,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.704809697113,0.0569498977447,-0.704809697116,0.0569498977485),PyKDL.Vector(1.51658199887e-13,-0.111581504993,0.113479001398))],
        [0.470042393024,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.705456378001,0.0482835244696,-0.705456378004,0.0482835244735),PyKDL.Vector(1.43399181418e-13,-0.11099009679,0.114550756859))],
        [0.48728433708,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.705990562638,0.0397155569418,-0.705990562642,0.0397155569456),PyKDL.Vector(1.35221694952e-13,-0.110388728203,0.115597186239))],
        [0.504863756909,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.706423649329,0.0310745501462,-0.706423649332,0.0310745501499),PyKDL.Vector(1.26823898605e-13,-0.109757107583,0.11665326048))],
        [0.522105700965,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.706746518883,0.0225689619664,-0.706746518886,0.0225689619701),PyKDL.Vector(1.18554471795e-13,-0.109119672812,0.117678119268))],
        [0.539991916952,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.706974109599,0.013697019921,-0.706974109602,0.0136970199246),PyKDL.Vector(1.09934630843e-13,-0.108439849574,0.118729494802))],
        [0.557632696012,PyKDL.Frame(PyKDL.Rotation.Quaternion(-0.70708923847,0.00498084704379,-0.707089238473,0.00498084704743),PyKDL.Vector(1.01387648277e-13,-0.107751041626,0.1197543703))],
        [0.575028038147,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.707097613379,0.00360071550431,0.707097613382,0.00360071550072),PyKDL.Vector(9.29369428637e-14,-0.107054217928,0.120752933865))],
        [0.591840467582,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.707005597728,0.0119618050046,0.707005597731,0.011961805001),PyKDL.Vector(8.47663952919e-14,-0.106364336329,0.121706377044))],
        [0.608867654328,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.706811631721,0.0204283445529,0.706811631725,0.0204283445494),PyKDL.Vector(7.64440594159e-14,-0.105649405236,0.122660039532))],
        [0.626477753772,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.706507401445,0.0291082754726,0.706507401449,0.0291082754691),PyKDL.Vector(6.7859780295e-14,-0.104893029841,0.123633396324))],
        [0.64421057168,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.706092776426,0.0378548685993,0.70609277643,0.0378548685959),PyKDL.Vector(5.91141718909e-14,-0.104114183,0.12459992418))],
        [0.661575234199,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.705579577851,0.0464484587182,0.705579577855,0.0464484587148),PyKDL.Vector(5.05689240482e-14,-0.103335014649,0.12553285715))],
        [0.678970576334,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.704960679279,0.055049438393,0.704960679283,0.0550494383897),PyKDL.Vector(4.20028595238e-14,-0.102538345389,0.126453732032))],
        [0.697194268094,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.70420455378,0.0639995815058,0.704204553784,0.0639995815025),PyKDL.Vector(3.30057162157e-14,-0.101686692503,0.127403440797))],
        [0.714313493687,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.703385295414,0.0724508536425,0.703385295417,0.0724508536393),PyKDL.Vector(2.45749601224e-14,-0.100871013749,0.128281316492))],
        [0.730911165812,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.702491231261,0.0806602132371,0.702491231264,0.0806602132339),PyKDL.Vector(1.63298194411e-14,-0.100065949152,0.12911899503))],
        [0.748398546794,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.701453439048,0.0892360512677,0.701453439051,0.0892360512645),PyKDL.Vector(7.69610070117e-15,-0.0992028130943,0.129986992483))],
        [0.766223403549,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.700291802991,0.0979356455067,0.700291802995,0.0979356455036),PyKDL.Vector(-1.12149872722e-15,-0.0983075371894,0.130856069507))],
        [0.783465347605,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.699054628008,0.106407833632,0.699054628012,0.106407833629),PyKDL.Vector(-9.65633822902e-15,-0.0974269323613,0.131681414138))],
        [0.800768650892,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.697710871352,0.114889251,0.697710871356,0.114889250997),PyKDL.Vector(-1.82466888821e-14,-0.0965290197246,0.132494308587))],
        [0.81770379879,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.696305956458,0.123117890651,0.696305956462,0.123117890648),PyKDL.Vector(-2.66201991006e-14,-0.0956367205451,0.133274747461))],
        [0.836357005171,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.694638740948,0.132200679168,0.694638740952,0.132200679165),PyKDL.Vector(-3.58020904589e-14,-0.0946387610819,0.13411673547))],
        [0.853629628843,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.692979408617,0.140639749823,0.692979408621,0.14063974982),PyKDL.Vector(-4.43490730251e-14,-0.0937008065058,0.134879682491))],
        [0.870503417509,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.691271015182,0.14880989069,0.691271015186,0.148809890687),PyKDL.Vector(-5.26705415393e-14,-0.0927719183111,0.135609261044))],
        [0.888021478107,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.689403741087,0.157233844235,0.689403741091,0.157233844232),PyKDL.Vector(-6.1262193235e-14,-0.0917946827983,0.136350001409))],
        [0.9051407037,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.687470487463,0.165482110408,0.687470487467,0.165482110406),PyKDL.Vector(-6.96647600718e-14,-0.0908273028155,0.137057230887))],
        [0.923303036228,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.685305119538,0.174232296468,0.685305119542,0.174232296466),PyKDL.Vector(-7.85742998444e-14,-0.0897879042333,0.13778933111))],
        [0.940882456058,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.683119340958,0.182614254664,0.683119340963,0.182614254661),PyKDL.Vector(-8.71828650939e-14,-0.0887693617912,0.138479844473))],
        [0.957940322419,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.680889720365,0.19075950487,0.68088972037,0.190759504867),PyKDL.Vector(-9.54284394561e-14,-0.087769581969,0.139132655839))],
        [0.974630033391,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.678599580113,0.198752634871,0.678599580117,0.198752634868),PyKDL.Vector(-1.03550848451e-13,-0.0867807417254,0.139754781958))],
        [0.992945763998,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.675989812139,0.207455474457,0.675989812143,0.207455474454),PyKDL.Vector(-1.12395769775e-13,-0.0856837819273,0.140418420857))],
        [1.01055586344,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.673396025708,0.215726198127,0.673396025712,0.215726198125),PyKDL.Vector(-1.20842138379e-13,-0.0846177915802,0.141037445705))],
        [1.0277978075,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.670749957841,0.22381799314,0.670749957846,0.223817993138),PyKDL.Vector(-1.29104626295e-13,-0.0835636835561,0.141625250857))],
        [1.04485567386,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.668020601693,0.231837174998,0.668020601698,0.231837174996),PyKDL.Vector(-1.37246117249e-13,-0.0825110097459,0.142188811166))],
        [1.06326344332,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.664986165102,0.240402579479,0.664986165107,0.240402579477),PyKDL.Vector(-1.45948140726e-13,-0.0813644279018,0.142776729933))],
        [1.08068946507,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.662013430312,0.248471765164,0.662013430317,0.248471765162),PyKDL.Vector(-1.5420000346e-13,-0.0802691983498,0.143313757978))],
        [1.09771665181,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.658991563851,0.256378857885,0.658991563856,0.256378857883),PyKDL.Vector(-1.62177779886e-13,-0.0791921067773,0.143819087392))],
        [1.11498927548,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.655823685487,0.264377180467,0.655823685492,0.264377180465),PyKDL.Vector(-1.70227113655e-13,-0.0780869125037,0.144314657878))],
        [1.13299820993,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.652457256829,0.272579397624,0.652457256833,0.272579397622),PyKDL.Vector(-1.78584577681e-13,-0.0769277225422,0.144810048745))],
        [1.15051627053,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.649072971799,0.280542826103,0.649072971803,0.280542826101),PyKDL.Vector(-1.86633477769e-13,-0.0757917464072,0.14527183198))],
        [1.16748209804,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.645687393126,0.288249527938,0.64568739313,0.288249527936),PyKDL.Vector(-1.94397666367e-13,-0.0746840323602,0.145700023929))],
        [1.18503083826,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.642096420785,0.296162432479,0.64209642079,0.296162432478),PyKDL.Vector(-2.02355059792e-13,-0.0735307880609,0.146123089465))],
        [1.20261025809,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.63841500928,0.304016900721,0.638415009284,0.304016900719),PyKDL.Vector(-2.10266483044e-13,-0.0723682624799,0.146526539195))],
        [1.21991356137,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.634679801045,0.311739554987,0.634679801049,0.311739554985),PyKDL.Vector(-2.18008120237e-13,-0.0712172442031,0.146903635224))],
        [1.23697142774,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.630895075268,0.319329616542,0.630895075272,0.31932961654),PyKDL.Vector(-2.25518822367e-13,-0.0700763329672,0.147255833925))],
        [1.25531783796,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.626755835819,0.327379172007,0.626755835824,0.327379172005),PyKDL.Vector(-2.33562301444e-13,-0.0688427271096,0.14761285646))],
        [1.27286657817,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.622690990633,0.335046161271,0.622690990637,0.335046161269),PyKDL.Vector(-2.41186519541e-13,-0.0676547380092,0.147933666853))],
        [1.29010852223,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.618602152985,0.342536678795,0.61860215299,0.342536678794),PyKDL.Vector(-2.4862729063e-13,-0.0664863401514,0.148227479668))],
        [1.30817881591,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.614211579704,0.3503485912,0.614211579708,0.350348591198),PyKDL.Vector(-2.56335751236e-13,-0.0652522814975,0.148514737483))],
        [1.32594231343,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.609833074989,0.35791566136,0.609833074994,0.357915661359),PyKDL.Vector(-2.63820703564e-13,-0.0640384738978,0.148774448104))],
        [1.34303085941,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.605491584501,0.365212186402,0.605491584505,0.365212186401),PyKDL.Vector(-2.70937731885e-13,-0.062864585526,0.149004320782))],
        [1.360150085,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.601044284706,0.372485929694,0.601044284711,0.372485929692),PyKDL.Vector(-2.77979841836e-13,-0.061684823114,0.149214459347))],
        [1.37791358253,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.596375140746,0.379916690208,0.59637514075,0.379916690206),PyKDL.Vector(-2.85208136405e-13,-0.0604570455382,0.149411123032))],
        [1.39552368197,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.591664746346,0.387211606139,0.591664746351,0.387211606138),PyKDL.Vector(-2.92284723985e-13,-0.0592366124977,0.149584531152))],
        [1.41273494641,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.586955386572,0.39431380165,0.586955386577,0.394313801649),PyKDL.Vector(-2.99116214111e-13,-0.0580410493905,0.149733220026))],
        [1.42991553124,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.58216989014,0.401345510765,0.582169890145,0.401345510764),PyKDL.Vector(-3.05832521309e-13,-0.0568452416446,0.149861100765))],
        [1.44749495106,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.577219723473,0.408432847396,0.577219723477,0.408432847395),PyKDL.Vector(-3.12615500164e-13,-0.055619585529,0.149970665802))],
        [1.46507437089,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.572128212068,0.415534967184,0.572128212073,0.415534967183),PyKDL.Vector(-3.19335175165e-13,-0.054392192804,0.150058668695))],
        [1.48204019841,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.567120404669,0.422343990848,0.567120404674,0.422343990847),PyKDL.Vector(-3.25704612206e-13,-0.0532063497494,0.150123128023))],
        [1.499159424,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.562023930602,0.429102670031,0.562023930607,0.429102670031),PyKDL.Vector(-3.32017962961e-13,-0.0520088503841,0.150167769207))],
        [1.51735243614,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.55653685287,0.436195748942,0.556536852875,0.436195748941),PyKDL.Vector(-3.38673616248e-13,-0.050735601834,0.150192734821))],
        [1.53493185597,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.551123397984,0.443015801289,0.551123397989,0.443015801289),PyKDL.Vector(-3.44956365449e-13,-0.0495050601095,0.150194850225))],
        [1.55208176118,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.545749436521,0.449619341816,0.545749436526,0.449619341815),PyKDL.Vector(-3.50990931774e-13,-0.0483047283829,0.150176068804))],
        [1.56935438485,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.540296356442,0.456157699939,0.540296356447,0.456157699938),PyKDL.Vector(-3.56981092026e-13,-0.0470963123358,0.15013634977))],
        [1.58717924161,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.534574712775,0.46284973421,0.53457471278,0.46284973421),PyKDL.Vector(-3.63001478648e-13,-0.0458501736054,0.150073484167))],
        [1.60420642836,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.528983876156,0.469229217722,0.528983876161,0.469229217722),PyKDL.Vector(-3.68693099597e-13,-0.044661025896,0.149992698426))],
        [1.62135633356,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.523305241494,0.475554018196,0.523305241499,0.475554018196),PyKDL.Vector(-3.74328511439e-13,-0.0434648732281,0.149890876078))],
        [1.63918119032,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.517375347684,0.481998702909,0.517375347689,0.481998702909),PyKDL.Vector(-3.80026793454e-13,-0.0422236866847,0.149763323016))],
        [1.65700604707,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.511309751544,0.488428436901,0.511309751549,0.4884284369),PyKDL.Vector(-3.85641280194e-13,-0.040984970809,0.149613667416))],
        [1.67427867075,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.505339700894,0.494602655368,0.505339700899,0.494602655368),PyKDL.Vector(-3.90937418071e-13,-0.0397873603003,0.149447607143))],
        [1.69188877019,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.499216443482,0.500782330514,0.499216443487,0.500782330514),PyKDL.Vector(-3.96229598611e-13,-0.0385673709751,0.14925668249))],
        [1.70913071425,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.493157562876,0.506750054934,0.493157562881,0.506750054934),PyKDL.Vector(-4.01288702788e-13,-0.037380511604,0.149049693704))],
        [1.726556736,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.48692605212,0.512740694469,0.486926052125,0.512740694469),PyKDL.Vector(-4.06223177925e-13,-0.0361847581532,0.148819767318))],
        [1.74379868005,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.480659963436,0.518619320453,0.480659963441,0.518619320453),PyKDL.Vector(-4.11090324108e-13,-0.0350015757387,0.148570917325))],
        [1.76147013873,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.474242779099,0.524493838352,0.474242779104,0.524493838353),PyKDL.Vector(-4.15891496588e-13,-0.0337957064977,0.148295211382))],
        [1.77877344202,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.46788556864,0.53017270267,0.467885568645,0.53017270267),PyKDL.Vector(-4.20484176991e-13,-0.0326219404602,0.148005176498))],
        [1.79644490069,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.461265055218,0.535942673084,0.461265055223,0.535942673084),PyKDL.Vector(-4.25018310476e-13,-0.0314243691252,0.147686939587))],
        [1.81411635937,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.454606958275,0.541601803436,0.45460695828,0.541601803437),PyKDL.Vector(-4.29458118373e-13,-0.0302346787786,0.147348160496))],
        [1.83160374035,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.447968739416,0.547105116503,0.447968739421,0.547105116503),PyKDL.Vector(-4.3367880901e-13,-0.0290634558324,0.146992266913))],
        [1.84841616979,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.441467969215,0.55236403952,0.44146796922,0.552364039521),PyKDL.Vector(-4.37627039641e-13,-0.027943470168,0.146630849388))],
        [1.86559675461,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.434759031147,0.557659918618,0.434759031152,0.557659918619),PyKDL.Vector(-4.41567572437e-13,-0.0268054022213,0.146242119408))],
        [1.88345229098,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.427784151787,0.563028169346,0.427784151792,0.563028169347),PyKDL.Vector(-4.45498238993e-13,-0.025629884064,0.145817461388))],
        [1.90109307004,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.420810989534,0.568258841625,0.420810989539,0.568258841625),PyKDL.Vector(-4.49222256615e-13,-0.0244761328422,0.145377365609))],
        [1.91848841218,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.413842481713,0.573353643337,0.413842481718,0.573353643337),PyKDL.Vector(-4.52779090263e-13,-0.0233442241585,0.144922712306))],
        [1.93658938547,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.406542189876,0.578552891142,0.406542189881,0.578552891143),PyKDL.Vector(-4.56290821099e-13,-0.0221790198633,0.144430493423))],
        [1.95423016453,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.399402177177,0.583504842194,0.399402177182,0.583504842195),PyKDL.Vector(-4.59637319525e-13,-0.0210502715034,0.143929740672))],
        [1.97119599205,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.392432153217,0.588215101064,0.392432153222,0.588215101064),PyKDL.Vector(-4.62659641501e-13,-0.0199732042387,0.143429435903))],
        [1.98816181956,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.385386215182,0.592855349259,0.385386215187,0.59285534926),PyKDL.Vector(-4.6559847991e-13,-0.0189047796587,0.142910930674))],
        [2.00531172477,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.378267453815,0.597422575219,0.37826745382,0.59742257522),PyKDL.Vector(-4.68420875005e-13,-0.0178357677178,0.14236944103))],
        [2.02319794076,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.37078207475,0.602096880113,0.370782074755,0.602096880114),PyKDL.Vector(-4.71202070418e-13,-0.0167270454784,0.141783209725))],
        [2.04065464212,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.363372572517,0.606597373502,0.363372572522,0.606597373503),PyKDL.Vector(-4.7377336429e-13,-0.0156570706389,0.141193019591))],
        [2.05786590656,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.356037787266,0.610931333324,0.356037787271,0.610931333325),PyKDL.Vector(-4.76146032324e-13,-0.0146142364514,0.140594014995))],
        [2.07556804486,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.348460302517,0.615284826375,0.348460302522,0.615284826376),PyKDL.Vector(-4.78500485762e-13,-0.0135488396499,0.139957062759))],
        [2.0931781443,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.340838716628,0.619539320176,0.340838716633,0.619539320178),PyKDL.Vector(-4.80683201576e-13,-0.0125021582414,0.139305921291))],
        [2.11032804951,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.333333186187,0.623609643113,0.333333186192,0.623609643115),PyKDL.Vector(-4.82638668614e-13,-0.0114940029593,0.138654176001))],
        [2.12750863433,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.325818718405,0.627568452628,0.32581871841,0.62756845263),PyKDL.Vector(-4.8442326539e-13,-0.01049539984,0.137984025675))],
        [2.1449653357,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.318151077541,0.631490215171,0.318151077545,0.631490215173),PyKDL.Vector(-4.86171432973e-13,-0.0094909408835,0.137284393174))],
        [2.16275951284,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.310275231996,0.635396947119,0.310275232,0.63539694712),PyKDL.Vector(-4.87744827166e-13,-0.00848330632425,0.136555841888))],
        [2.18003213651,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.302542808858,0.639114894839,0.302542808863,0.639114894841),PyKDL.Vector(-4.8912957018e-13,-0.00751607571729,0.135830368321))],
        [2.19764223596,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.29468104908,0.642777628197,0.294681049085,0.642777628199),PyKDL.Vector(-4.90369897466e-13,-0.00654299745508,0.13507363463))],
        [2.21500689848,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.286846340507,0.646311981117,0.286846340512,0.646311981119),PyKDL.Vector(-4.91493998278e-13,-0.00559667582031,0.134310783))],
        [2.23234088138,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.278932970275,0.6497664181,0.27893297028,0.649766418102),PyKDL.Vector(-4.92430748955e-13,-0.00466537916934,0.133533005523))],
        [2.24979758274,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.27095075723,0.653135274774,0.270950757235,0.653135274776),PyKDL.Vector(-4.93233058563e-13,-0.00374125613401,0.132733526213))],
        [2.26728496373,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.26299029389,0.656381067153,0.262990293894,0.656381067155),PyKDL.Vector(-4.93911335442e-13,-0.00282964269319,0.131916590251))],
        [2.2843735097,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.255132186728,0.659475221137,0.255132186732,0.659475221138),PyKDL.Vector(-4.94393588568e-13,-0.00195275341511,0.131103005251))],
        [2.30167681299,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.247109636765,0.662523076893,0.24710963677,0.662523076895),PyKDL.Vector(-4.94776962456e-13,-0.00107914099688,0.130264050049))],
        [2.32023798052,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.238478121089,0.665678740655,0.238478121093,0.665678740657),PyKDL.Vector(-4.94980792465e-13,-0.000156802912824,0.129345920485))],
        [2.33738788573,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.230505385141,0.668481314188,0.230505385146,0.66848131419),PyKDL.Vector(-4.95044109872e-13,0.000677250753288,0.128485483359))],
        [2.35481390748,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.222288029505,0.671258543287,0.222288029509,0.67125854329),PyKDL.Vector(-4.94934822293e-13,0.00151099700709,0.127595093513))],
        [2.371779735,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.214265062824,0.673862361948,0.214265062828,0.673862361951),PyKDL.Vector(-4.9469369573e-13,0.0023076998282,0.126714387336))],
        [2.3896966306,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.205841797427,0.676482929888,0.205841797432,0.67648292989),PyKDL.Vector(-4.94310321841e-13,0.00313271401897,0.125769779623))],
        [2.39116925216,PyKDL.Frame(PyKDL.Rotation.Quaternion(0.205160954369,0.676689724172,0.205160954374,0.676689724174),PyKDL.Vector(-4.94266086393e-13,0.00319976842925,0.125691485856))]
        ]

    def getQ5Q6SpaceSector(self, q5, q6, margin=0.0):
        i = 0
        # x1,x2,y1,y2
        for r in self.q5_q6_restricted_area:
            if q5 > r[0]+margin and q5 < r[1]-margin and q6 > r[2]+margin and q6 < r[3]-margin:
                return i
            i += 1
        return -1

    def getClosestQ5Q6SpaceSector(self, q5, q6):
        dist = []
        sect = self.getQ5Q6SpaceSector(q5, q6)
        if sect >= 0:
            return sect
        # x1,x2,y1,y2
        for r in self.q5_q6_restricted_area:
            d5 = 1000000.0
            d6 = 1000000.0
            if q5 < r[0]:
                d5 = r[0] - q5
            elif q5 > r[1]:
                d5 = q5 - r[1]
            if q6 < r[2]:
                d6 = r[2] - q6
            elif q6 > r[3]:
                d6 = q6 - r[3]
            dist.append( min( d5, d6 ) )

        i = 0
        min_dist = 1000000.0
        min_index = -1
        for d in dist:
            if d < min_dist:
                min_dist = d
                min_index = i
            i += 1
        return min_index

#1.92521262169
#-1.44746339321
#-0.428265035152
#-2.89507389069

#-2.16006875038
#-1.44746339321
#0.273337930441
#2.22040915489

#2.07619023323
#0.932657182217
#-0.819031119347
#2.86872577667

    def initRightQ5Q6SelfCollisionDetection(self):
        self.right_q5_q6_collision_polygon = [
        [2.12191557884,-2.90171504021],
        [1.90023589134,-1.52496743202],
        [0.465151429176,-1.25661826134],
        [0.319309473038,-0.218223929405],
        [1.30520093441,1.01851558685],
        [2.11024808884,1.01851534843],
        [2.12191557884,2.89695906639],
        [-0.812423944473,2.8736243248],
        [-1.2324488163,2.25525474548],
        [-2.18333816528,2.27858948708],
        [-2.22417378426,-1.30328762531],
        [-0.41573381424,-1.85165309906],
        [-0.386565506458,-2.89588117599],
        ]

        self.r1_r2_point = [0.00486671971157, -1.43977892399]
        self.r2_r3_point = [-0.202122956514, 1.60210323334]
        self.q5_q6_restricted_area = [
        [-0.428265035152,1.92521262169,-2.89507389069,-1.38213706017],
        [-2.11473441124,0.435783565044,-1.52231526375,2.22040915489],
        [-0.819031119347,2.07619023323,0.932657182217,2.86872577667],
        ]

    def tactileCallback(self, data):
        max_tactile_value = -1.0
        max_tactile_index = 0
        max_tactile_finger = 0
        fingers = [data.finger1_tip, data.finger2_tip, data.finger3_tip]
        val_sum = 0.0
        for f in range(0,3):
            for i in range(0, 24):
                if fingers[f][i] > max_tactile_value:
                    max_tactile_value = fingers[f][i]
                    max_tactile_index = i
                    max_tactile_finger = f
        self.tactile_lock.acquire()
        self.tactile_data_index += 1
        if self.tactile_data_index >= self.tactile_data_len:
            self.tactile_data_index = 0

        self.max_tactile_value = copy.copy(max_tactile_value)
        # time, finger, max value, contact center
        self.tactile_data[self.tactile_data_index][0] = copy.copy(data.header.stamp)
        self.tactile_data[self.tactile_data_index][1] = copy.copy(data.finger1_tip)
        self.tactile_data[self.tactile_data_index][2] = copy.copy(data.finger2_tip)
        self.tactile_data[self.tactile_data_index][3] = copy.copy(data.finger3_tip)
        self.tactile_data[self.tactile_data_index][4] = copy.copy(data.palm_tip)
        self.tactile_lock.release()

    def getMaxWrench(self):
        wrench = Wrench()
        for i in range(0,self.wrench_tab_len):
            if abs(self.wrench_tab[i].force.x) > wrench.force.x:
                wrench.force.x = abs(self.wrench_tab[i].force.x)
            if abs(self.wrench_tab[i].force.y) > wrench.force.y:
                wrench.force.y = abs(self.wrench_tab[i].force.y)
            if abs(self.wrench_tab[i].force.z) > wrench.force.z:
                wrench.force.z = abs(self.wrench_tab[i].force.z)
            if abs(self.wrench_tab[i].torque.x) > wrench.torque.x:
                wrench.torque.x = abs(self.wrench_tab[i].torque.x)
            if abs(self.wrench_tab[i].torque.y) > wrench.torque.y:
                wrench.torque.y = abs(self.wrench_tab[i].torque.y)
            if abs(self.wrench_tab[i].torque.z) > wrench.torque.z:
                wrench.torque.z = abs(self.wrench_tab[i].torque.z)
        return wrench

    def wrenchCallback(self, wrench):
        self.wrench_tab[self.wrench_tab_index] = wrench
        self.wrench_tab_index += 1
        if self.wrench_tab_index >= self.wrench_tab_len:
            self.wrench_tab_index = 0
        wfx = abs(wrench.force.x)
        wfy = abs(wrench.force.y)
        wfz = abs(wrench.force.z)
        wtx = abs(wrench.torque.x)
        wty = abs(wrench.torque.y)
        wtz = abs(wrench.torque.z)
        if (wfx>self.current_max_wrench.force.x*2.0) or (wfy>self.current_max_wrench.force.y*2.0) or (wfz>self.current_max_wrench.force.z*2.0) or (wtx>self.current_max_wrench.torque.x*2.0) or (wty>self.current_max_wrench.torque.y*2.0) or (wtz>self.current_max_wrench.torque.z*2.0):
            self.wrench_emergency_stop = True

    #
    # joint state
    #
    def updateMimicJoints(self):
        position_map = {}
        for i in range(len(self.js.name)):
            position_map[self.js.name[i]] = self.js.position[i]

        for i in range(len(self.js.name)):
            joint_name = self.js.name[i]
            if joint_name in self.mimic_joints_map:
                print self.mimic_joints_map[joint_name]
                print joint_name, self.mimic_joints_map[joint_name].joint, self.mimic_joints_map[joint_name].multiplier, self.mimic_joints_map[joint_name].offset
                self.js.position[i] = position_map[self.mimic_joints_map[joint_name].joint] * self.mimic_joints_map[joint_name].multiplier
                if self.mimic_joints_map[joint_name].offset != None:
                    self.js.position[i] += self.mimic_joints_map[joint_name].offset

    def updateJointLimits(self):
        for i in range(len(self.js.name)):
            joint_name = self.js.name[i]
            if joint_name in self.mimic_joints_map:
                continue
            if self.js.position[i] < self.joint_name_limit_map[joint_name].lower:
                self.js.position[i] = self.joint_name_limit_map[joint_name].lower
            elif self.js.position[i] > self.joint_name_limit_map[joint_name].upper:
                self.js.position[i] = self.joint_name_limit_map[joint_name].upper

    def initJointStatePublisher(self):
        self.pub_js = rospy.Publisher("/joint_states", JointState)
        self.robot = URDF.from_parameter_server()
        self.mimic_joints_map = {}
        self.joint_name_limit_map = {}
        self.joint_name_idx_map = {}
        self.js = JointState()

        joint_idx_ros = 0
        for i in range(len(self.robot.joints)):
            joint = self.robot.joints[i]
            
            if joint.joint_type == "fixed":
                continue
            if joint.mimic != None:
                self.mimic_joints_map[joint.name] = joint.mimic

            self.joint_name_limit_map[joint.name] = joint.limit
            self.joint_name_idx_map[joint.name] = joint_idx_ros

            self.js.name.append(joint.name)
            print joint.name
            self.js.position.append(0)
            joint_idx_ros += 1

        self.updateJointLimits()
        self.updateMimicJoints()
        print self.js.name
        print self.joint_name_idx_map

    def publishJointStates(self):
        self.js.header.stamp = rospy.Time.now()
        self.pub_js.publish(self.js)

    def setInitialJointPosition(self):
        print "limits:", self.joint_name_limit_map["torso_1_joint"]
        self.js.position[self.joint_name_idx_map["torso_1_joint"]] = -80.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["right_arm_0_joint"]] = 90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["right_arm_1_joint"]] = -90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["right_arm_2_joint"]] = 90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["right_arm_3_joint"]] = 90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["right_arm_4_joint"]] = 0.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["right_arm_5_joint"]] = -90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["right_arm_6_joint"]] = 90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["left_arm_0_joint"]] = 90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["left_arm_1_joint"]] = 90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["left_arm_2_joint"]] = -90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["left_arm_3_joint"]] = -90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["left_arm_4_joint"]] = 0.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["left_arm_5_joint"]] = 90.0/180.0*math.pi
        self.js.position[self.joint_name_idx_map["left_arm_6_joint"]] = -90.0/180.0*math.pi

        self.updateJointLimits()
        self.updateMimicJoints()

    #
    # init
    #
    def __init__(self, openraveinstance, velma_ikr):

        self.velma_ikr = velma_ikr
        self.openrave = openraveinstance

        self.joint_impedance_active = False
        self.cartesian_impedance_active = False
        self.qar = [-90.0/180.0*math.pi, 90.0/180.0*math.pi, -90.0/180.0*math.pi, 90.0/180.0*math.pi, 0.0/180.0*math.pi, -90.0/180.0*math.pi, 0]
        self.qal = [-90.0/180.0*math.pi, -90.0/180.0*math.pi, 90.0/180.0*math.pi, -90.0/180.0*math.pi, 0, 90.0/180.0*math.pi, 0]
        self.qhr = [0.0, 0.0, 0.0, 0.0]
        self.qhl = [0.0, 0.0, 0.0, 0.0]
        self.qt = [0.0, -1.5707963267948966]

        # barrett hand kinematics
        self.setSavedKinematics()

        self.abort_on_q5_singularity = False
        self.abort_on_q5_singularity_angle = 20.0/180.0*math.pi
        self.aborted_on_q5_singularity = False
        self.abort_on_q5_q6_self_collision = False
        self.aborted_on_q5_q6_self_collision = False

        self.T_B_L = [PyKDL.Frame(),PyKDL.Frame(),PyKDL.Frame(),PyKDL.Frame(),PyKDL.Frame(),PyKDL.Frame(),PyKDL.Frame()]

#        self.initRightQ5Q6SelfCollisionDetection()

        # parameters
        self.prefix="right"
        self.T_B_W = None
        self.T_W_T = PyKDL.Frame(PyKDL.Vector(0.2,-0.05,0))    # tool transformation
        self.T_W_E = None
        self.T_E_W = None
        self.wrench_emergency_stop = False
        self.exit_on_emergency_stop = True
        self.k_error = Wrench(Vector3(1.0, 1.0, 1.0), Vector3(0.5, 0.5, 0.5))

        self.last_contact_time = rospy.Time.now()

        self.tactile_lock = Lock()

        # for tactile sync
        self.tactile_data = []
        self.tactile_data_len = 40
        self.tactile_data_index = 0
        for i in range(0, self.tactile_data_len):
            self.tactile_data.append( [rospy.Time.now(), [], [], [], []] )

        # for score function
        self.failure_reason = "unknown"

        self.emergency_stop_active = False

        self.max_tactile_value = 0

        self.initJointStatePublisher()
        self.setInitialJointPosition()

        self.fk_solver = velma_fk_ik.VelmaFkIkSolver(self.js)
#


    def moveWrist2(self, wrist_frame):
        pass

    def moveWrist(self, wrist_frame, t, max_wrench, start_time=0.01, stamp=None, abort_on_q5_singularity = False, abort_on_q5_q6_self_collision=False):
        if not (self.cartesian_impedance_active and not self.joint_impedance_active):
            print "FATAL ERROR: moveWrist"
            exit(0)
        self.T_B_W_current = self.openrave.getLinkPose("right_arm_7_link", qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
        self.T_B_T2_current = self.openrave.getLinkPose("torso_link2", qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
        self.T_T2_B_current = self.T_B_T2_current.Inverse()
        qar = copy.deepcopy(self.qar)
        for f in np.linspace(0.0, 1.0, 50):
            q_out, T_B_Ei = self.velma_ikr.simulateTrajectory(self.T_B_W_current * self.T_W_E, wrist_frame * self.T_W_E, f, qar, self.T_T2_B_current)
            if q_out == None :
                print "moveWrist: could not reach the desired pose"
                break
#            self.dofs_lock.acquire()
            self.qar = q_out
#            self.dofs_lock.release()
            rospy.sleep(t/50.0)

    def moveWristTraj(self, wrist_frames, times, max_wrench, start_time=0.01, stamp=None, abort_on_q5_singularity = False, abort_on_q5_q6_self_collision=False):
        if not (self.cartesian_impedance_active and not self.joint_impedance_active):
            print "FATAL ERROR: moveWristTraj"
            exit(0)
        i = 0
        for wrist_frame in wrist_frames:
            self.T_B_W_current = self.openrave.getLinkPose("right_arm_7_link", qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
            self.T_B_T2_current = self.openrave.getLinkPose("torso_link2", qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
            self.T_T2_B_current = self.T_B_T2_current.Inverse()
            if i > 0:
                time_diff = times[i] - times[i-1]
            else:
                time_diff = times[i]
            for f in np.linspace(0.0, 1.0, 10):
                q_out, T_B_Ei = self.velma_ikr.simulateTrajectory(self.T_B_W_current * self.T_W_E, wrist_frame * self.T_W_E, f, self.qar, self.T_T2_B_current)
                if q_out == None :
                    print "moveWristTraj: could not reach the desired pose"
                    return
#                self.dofs_lock.acquire()
                self.qar = q_out
#                self.dofs_lock.release()
                rospy.sleep(time_diff/10.0)
            i += 1

    def moveWristJoint(self, q_dest, time, max_wrench, start_time=0.01, stamp=None, abort_on_q5_singularity = False, abort_on_q5_q6_self_collision=False):
        if not (not self.cartesian_impedance_active and self.joint_impedance_active):
            print "FATAL ERROR: moveWristJoint"
            exit(0)
        self.qar = q_dest
        rospy.sleep(time)

    def moveWristTrajJoint(self, traj, time_mult, max_wrench, start_time=0.01, stamp=None, abort_on_q5_singularity = False, abort_on_q5_q6_self_collision=False):
        if not (not self.cartesian_impedance_active and self.joint_impedance_active):
            print "FATAL ERROR: moveWristTrajJoint"
            exit(0)
        for i in range(0, len(traj[0])):
            rospy.sleep(traj[3][i]*time_mult)
            self.qar = traj[0][i]

    def moveTool(self, wrist_frame, t):
        pass

    def moveImpedance(self, k, t, stamp=None, damping=Wrench(Vector3(0.7, 0.7, 0.7),Vector3(0.7, 0.7, 0.7))):
        pass

    def moveImpedanceTraj(self, k_n, t_n, stamp=None, damping=Wrench(Vector3(0.7, 0.7, 0.7),Vector3(0.7, 0.7, 0.7))):
        pass

    def stopArm(self):
        pass

    def emergencyStop(self):
        self.moveImpedance(self.k_error, 0.5)
        self.stopArm()
        self.emergency_stop_active = True
        print "emergency stop"

    def checkStopCondition(self, t=0.0):
        if rospy.is_shutdown():
            self.emergencyStop()
            print "emergency stop: interrupted  %s  %s"%(self.getMaxWrench(), self.wrench_tab_index)
            self.failure_reason = "user_interrupt"
            rospy.sleep(1.0)
        # TODO
        return
        end_t = rospy.Time.now()+rospy.Duration(t+0.0001)
        while rospy.Time.now()<end_t:
            if rospy.is_shutdown():
                self.emergencyStop()
                print "emergency stop: interrupted  %s  %s"%(self.getMaxWrench(), self.wrench_tab_index)
                self.failure_reason = "user_interrupt"
                rospy.sleep(1.0)
            if self.wrench_emergency_stop:
                self.emergencyStop()
                print "too big wrench"
                self.failure_reason = "too_big_wrench"
                rospy.sleep(1.0)
            if self.aborted_on_q5_singularity:
#                print "aborted_on_q5_singularity"
                break

            if (self.action_right_trajectory_client.gh) and ((self.action_right_trajectory_client.get_state()==GoalStatus.REJECTED) or (self.action_right_trajectory_client.get_state()==GoalStatus.ABORTED)):
                state = self.action_right_trajectory_client.get_state()
                result = self.action_right_trajectory_client.get_result()
                self.emergencyStop()
                print "emergency stop: traj_err: %s ; %s ; max_wrench: %s   %s"%(state, result, self.getMaxWrench(), self.wrench_tab_index)
                self.failure_reason = "too_big_wrench_trajectory"
                rospy.sleep(1.0)

            if (self.action_tool_client.gh) and ((self.action_tool_client.get_state()==GoalStatus.REJECTED) or (self.action_tool_client.get_state()==GoalStatus.ABORTED)):
                state = self.action_tool_client.get_state()
                result = self.action_tool_client.get_result()
                self.emergencyStop()
                print "emergency stop: tool_err: %s ; %s ; max_wrench: %s   %s"%(state, result, self.getMaxWrench(), self.wrench_tab_index)
                self.failure_reason = "too_big_wrench_tool"
                rospy.sleep(1.0)
            rospy.sleep(0.01)
        return self.emergency_stop_active

    # ex.
    # q = (120.0/180.0*numpy.pi, 120.0/180.0*numpy.pi, 40.0/180.0*numpy.pi, 180.0/180.0*numpy.pi)
    # robot.move_hand_client("right", q)
    def move_hand_client(self, q, v=(1.2, 1.2, 1.2, 1.2), t=(2000.0, 2000.0, 2000.0, 2000.0)):
        steps = 100
        q_traj = [np.linspace(self.qhr[0], q[3], steps), np.linspace(self.qhr[1], q[0], steps), np.linspace(self.qhr[2], q[2], steps), np.linspace(self.qhr[3], q[1], steps)]
        for i in range(0, steps):
            self.qhr[0] = q_traj[0][i]
            self.qhr[1] = q_traj[1][i]
            self.qhr[2] = q_traj[2][i]
            self.qhr[3] = q_traj[3][i]
            rospy.sleep(0.02)
        # TODO
        return
        rospy.wait_for_service('/' + self.prefix + '_hand/move_hand')
        try:
            move_hand = rospy.ServiceProxy('/' + self.prefix + '_hand/move_hand', BHMoveHand)
            resp1 = move_hand(q[0], q[1], q[2], q[3], v[0], v[1], v[2], v[3], t[0], t[1], t[2], t[3])
        except rospy.ServiceException, e:
            print "Service call failed: %s"%e

    def hasContact(self, threshold, print_on_false=False):
        if self.T_F_C != None:
            return True
        return False

    def updateTransformations(self):

#        self.T_B_T2 = self.openrave.getLinkPose('torso_link2', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
        self.T_B_T2 = self.fk_solver.calculateFk("torso_link2", self.js)
        self.T_T2_B = self.T_B_T2.Inverse()

#        self.T_B_W = self.openrave.getLinkPose(self.prefix+'_arm_7_link', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
        self.T_B_W = self.fk_solver.calculateFk(self.prefix+'_arm_7_link', self.js)
#        self.T_B_E = self.openrave.getLinkPose(self.prefix+'_HandPalmLink', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
        self.T_B_E = self.fk_solver.calculateFk(self.prefix+'_HandPalmLink', self.js)
        self.T_W_E = self.T_B_W.Inverse() * self.T_B_E
        self.T_E_W = self.T_W_E.Inverse()

#        for i in range(0,7):
#            self.T_B_L[i] = self.openrave.getLinkPose(self.prefix+'_arm_' + str(i+1) + '_link', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)

#        self.T_B_F = self.openrave.getLinkPose(self.prefix+'_HandFingerThreeKnuckleThreeLink', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
#        self.T_E_F = self.T_B_E.Inverse() * self.T_B_F
#        self.T_F_E = self.T_E_F.Inverse()

#        self.T_B_F13 = self.openrave.getLinkPose(self.prefix+'_HandFingerOneKnuckleThreeLink', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
#        self.T_E_F13 = self.T_B_E.Inverse() * self.T_B_F13
#        self.T_F13_E = self.T_E_F13.Inverse()

#        self.T_B_F23 = self.openrave.getLinkPose(self.prefix+'_HandFingerTwoKnuckleThreeLink', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
#        self.T_E_F23 = self.T_B_E.Inverse() * self.T_B_F23
#        self.T_F23_E = self.T_E_F23.Inverse()

#        self.T_B_F33 = self.openrave.getLinkPose(self.prefix+'_HandFingerThreeKnuckleThreeLink', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
#        self.T_E_F33 = self.T_B_E.Inverse() * self.T_B_F33
#        self.T_F33_E = self.T_E_F33.Inverse()

        # camera pose
        self.T_B_C = PyKDL.Frame(PyKDL.Rotation.RotY(135.0/180.0*math.pi), PyKDL.Vector(0.4, 0, 1.4)) * PyKDL.Frame(PyKDL.Rotation.RotZ(-90.0/180.0*math.pi))

#        pose = self.listener.lookupTransform('torso_base', self.prefix+'_arm_cmd', rospy.Time(0))
#        self.T_B_T_cmd = pm.fromTf(pose)

#        self.T_B_F11 = self.openrave.getLinkPose(self.prefix+'_HandFingerOneKnuckleOneLink', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
#        self.T_E_F11 = self.T_B_E.Inverse() * self.T_B_F11
#        self.T_F11_E = self.T_E_F11.Inverse()

#        self.T_B_F21 = self.openrave.getLinkPose(self.prefix+'_HandFingerTwoKnuckleOneLink', qt=self.qt, qar=self.qar, qal=self.qal, qhr=self.qhr, qhl=self.qhl)
#        self.T_E_F21 = self.T_B_E.Inverse() * self.T_B_F21
#        self.T_F21_E = self.T_E_F21.Inverse()

#        self.T_E_F31 = PyKDL.Frame()

    def getContactPoints(self, threshold, f1=True, f2=True, f3=True, palm=True):
        return [], []
        self.tactile_lock.acquire()
        index = copy.copy(self.tactile_data_index)
        max_value = copy.copy(self.max_tactile_value)
        self.tactile_lock.release()

        contacts = []
        forces = []
        if f1:
            for i in range(0, self.tactile_data_len-2):
                time = self.tactile_data[index][0]
                if self.listener.canTransform('torso_base', '/'+self.prefix+'_HandFingerOneKnuckleThreeLink', time):
                    T_B_F = pm.fromTf(self.listener.lookupTransform('torso_base', '/'+self.prefix+'_HandFingerOneKnuckleThreeLink', time))
                    for i in range(0, len(self.pressure_frames)):
                        if self.tactile_data[index][1][i] > threshold:
                            contacts.append( T_B_F * self.pressure_frames[i] * PyKDL.Vector() )
                            forces.append(self.tactile_data[index][4][i])
                    break
                index -= 1
                if index < 0:
                    index = copy.copy(self.tactile_data_len)-1

        if f2:
            for i in range(0, self.tactile_data_len-2):
                time = self.tactile_data[index][0]
                if self.listener.canTransform('torso_base', '/'+self.prefix+'_HandFingerTwoKnuckleThreeLink', time):
                    T_B_F = pm.fromTf(self.listener.lookupTransform('torso_base', '/'+self.prefix+'_HandFingerTwoKnuckleThreeLink', time))
                    for i in range(0, len(self.pressure_frames)):
                        if self.tactile_data[index][2][i] > threshold:
                            contacts.append( T_B_F * self.pressure_frames[i] * PyKDL.Vector() )
                            forces.append(self.tactile_data[index][4][i])
                    break
                index -= 1
                if index < 0:
                    index = copy.copy(self.tactile_data_len)-1

        if f3:
            for i in range(0, self.tactile_data_len-2):
                time = self.tactile_data[index][0]
                if self.listener.canTransform('torso_base', '/'+self.prefix+'_HandFingerThreeKnuckleThreeLink', time):
                    T_B_F = pm.fromTf(self.listener.lookupTransform('torso_base', '/'+self.prefix+'_HandFingerThreeKnuckleThreeLink', time))
                    for i in range(0, len(self.pressure_frames)):
                        if self.tactile_data[index][3][i] > threshold:
                            contacts.append( T_B_F * self.pressure_frames[i] * PyKDL.Vector() )
                            forces.append(self.tactile_data[index][4][i])
                    break
                index -= 1
                if index < 0:
                    index = copy.copy(self.tactile_data_len)-1

        if palm:
            for i in range(0, self.tactile_data_len-2):
                time = self.tactile_data[index][0]
                if self.listener.canTransform('torso_base', '/'+self.prefix+'_HandPalmLink', time):
                    T_B_F = pm.fromTf(self.listener.lookupTransform('torso_base', '/'+self.prefix+'_HandPalmLink', time))
                    for i in range(0, len(self.palm_pressure_frames)):
                        if self.tactile_data[index][4][i] > threshold:
                            contacts.append( T_B_F * self.palm_pressure_frames[i] * PyKDL.Vector() )
                            forces.append(self.tactile_data[index][4][i])
                    break
                index -= 1
                if index < 0:
                    index = copy.copy(self.tactile_data_len)-1

        return contacts, forces

    def calculateMoveGripperPointToPose(self, P_E_p, rot_B_E, pos_B_E_p):
        P_B_N = PyKDL.Frame( copy.deepcopy(rot_B_E) ) * P_E_p
        T_B_Ed = PyKDL.Frame( copy.deepcopy(rot_B_E), pos_B_E_p - P_B_N )
        T_B_Wd = T_B_Ed * self.T_E_W
        return T_B_Wd

    def handleEmergencyStop(self):
        if self.emergency_stop_active:
            ch = '_'
            while (ch != 'e') and (ch != 'n') and (ch != 'r'):
                ch = raw_input("Emergency stop active... (e)xit, (n)ext case, (r)epeat case: ")
            if ch == 'e':
                exit(0)
            if ch == 'n':
                self.action = "next"
                self.index += 1
            if ch == 'r':
                self.action = "repeat"
            self.updateTransformations()
            print "moving desired pose to current pose"
            self.emergency_stop_active = False
            self.moveWrist(self.T_B_W, 2.0, Wrench(Vector3(25,25,25), Vector3(5,5,5)))
            self.checkStopCondition(2.0)
            return True
        return False

    def updateAndMoveTool(self, tool, duration):
        self.T_W_T = copy.deepcopy(tool)    # tool transformation
        self.updateTransformations()

    def updateAndMoveToolOnly(self, tool, duration):
        self.T_W_T = copy.deepcopy(tool)    # tool transformation
        self.updateTransformations()

    def waitForFirstContact(self, threshold, duration, emergency_stop=True, f1=True, f2=True, f3=True, palm=True):
        contacts = []
        contact_found = False
        end_t = rospy.Time.now()+rospy.Duration(duration)
        while rospy.Time.now()<end_t:
            if self.checkStopCondition(0.02):
                    break
            contacts = self.getContactPoints(threshold, f1, f2, f3, palm)
            if len(contacts) > 0:
                contact_found = True
                self.stopArm()
                break
        if emergency_stop and not contact_found:
            print "could not find contact point"
            self.emergencyStop()
            rospy.sleep(1.0)
        return contacts

    def getFingersKinematics(self):
        return

    def get_T_E_Fd(self, finger, angle, spread_angle):
        if finger == 0:
            T_E_F = PyKDL.Frame(PyKDL.Rotation.RotZ(90.0/180.0*math.pi - spread_angle), self.T_E_F11.p)
            kinematics_tab = self.F1_kinematics
        elif finger == 1:
            T_E_F = PyKDL.Frame(PyKDL.Rotation.RotZ(90.0/180.0*math.pi + spread_angle), self.T_E_F21.p)
            kinematics_tab = self.F2_kinematics
        elif finger == 2:
            T_E_F = PyKDL.Frame()
            kinematics_tab = self.F3_kinematics

        if angle >= kinematics_tab[-1][0]:
            return T_E_F * kinematics_tab[-1][1]

        if angle <= kinematics_tab[0][0]:
            return T_E_F * kinematics_tab[0][1]

        T_Fbase_F = None
        for i in range(0,len(kinematics_tab)-1):
            if angle >= kinematics_tab[i][0] and angle <= kinematics_tab[i+1][0]:
                diff = PyKDL.diff(kinematics_tab[i][1], kinematics_tab[i+1][1], 1.0)
                d = (angle - kinematics_tab[i][0])/(kinematics_tab[i+1][0]-kinematics_tab[i][0])
                return T_E_F * PyKDL.addDelta(kinematics_tab[i][1], diff, d)
        return None

    def getClosestRotations(self, rot_set, rot):
        buf = [[100000.0,0], [100000.0,0], [100000.0,0], [100000.0,0], [100000.0,0], [100000.0,0], [100000.0,0], [100000.0,0], [100000.0,0]]
        lbuf = len(buf)
        def putToBuffer(data):
            for i in range(0, lbuf):
                if data[0] < buf[lbuf-1-i][0]:
                    for j in range(0, lbuf-1-i):
                        buf[j] = buf[j+1]
                    buf[-1-i] = data
                    break
        i = 0
        for r in rot_set:
            twist = PyKDL.diff(PyKDL.Frame(r), PyKDL.Frame(rot), 1.0)
            twist_v = (twist.rot.x()*twist.rot.x() + twist.rot.y()*twist.rot.y() + twist.rot.z()*twist.rot.z())
            putToBuffer([twist_v,i])
            i += 1
        print "%s   %s   %s   %s   %s   %s   %s   %s   %s"%(buf[8][0], buf[7][0], buf[6][0], buf[5][0], buf[4][0], buf[3][0], buf[2][0], buf[1][0], buf[0][0])
#        print "%s"%(buf[2][0])
#        print "%s"%(buf[1][0])
#        print "%s"%(buf[0][0])
        return [buf[0][1], buf[1][1], buf[2][1]]

    def getClosestRotation(self, rot_set, rot):
        min_twist = 10000.0
        i = 0
        index = 0
        for r in rot_set:
            twist = PyKDL.diff(PyKDL.Frame(r), PyKDL.Frame(rot), 1.0)
            twist_v = (twist.rot.x()*twist.rot.x() + twist.rot.y()*twist.rot.y() + twist.rot.z()*twist.rot.z())
            if min_twist > twist_v:
                min_twist = twist_v
                index = i
            i += 1
        return [min_twist, index]

    def getMovementTime(self, T_B_Wd, max_v_l = 0.1, max_v_r = 0.2):
        self.updateTransformations()
        twist = PyKDL.diff(self.T_B_W, T_B_Wd, 1.0)
        v_l = twist.vel.Norm()
        v_r = twist.rot.Norm()
#        print "v_l: %s   v_r: %s"%(v_l, v_r)
        f_v_l = v_l/max_v_l
        f_v_r = v_r/max_v_r
        if f_v_l > f_v_r:
            duration = f_v_l
        else:
            duration = f_v_r
        if duration < 0.02:
            duration = 0.02
        return duration

    def generateTrajectoryInJoint(self, i, rel_angle, om):
        if rel_angle > 0.0:
            omega = math.fabs(om)
        elif rel_angle < 0.0:
            omega = -math.fabs(om)
        else:
            return None

        self.updateTransformations()
        T_Li_L7 = self.T_B_L[i].Inverse() * self.T_B_L[6]

        time_d = 0.01
        stop = False
        angle = 0.0
        times = []
        time = 0.5
        tab_T_B_Wd = []
        while not stop:
            angle += omega * time_d
            time += time_d
            if rel_angle > 0.0 and angle > rel_angle:
                angle = rel_angle
                stop = True
            if rel_angle < 0.0 and angle < rel_angle:
                angle = rel_angle
                stop = True
            if i == 0:
                T_Li_Lid = PyKDL.Frame(PyKDL.Rotation.RotZ(angle))
            elif i == 1:
                T_Li_Lid = PyKDL.Frame(PyKDL.Rotation.RotY(angle))
            elif i == 2:
                T_Li_Lid = PyKDL.Frame(PyKDL.Rotation.RotZ(angle))
            elif i == 3:
                T_Li_Lid = PyKDL.Frame(PyKDL.Rotation.RotY(-angle))
            elif i == 4:
                T_Li_Lid = PyKDL.Frame(PyKDL.Rotation.RotZ(angle))
            elif i == 5:
                T_Li_Lid = PyKDL.Frame(PyKDL.Rotation.RotY(angle))
            elif i == 6:
                T_Li_Lid = PyKDL.Frame(PyKDL.Rotation.RotZ(angle))
            T_B_Wd = self.T_B_L[i] * T_Li_Lid * T_Li_L7
            tab_T_B_Wd.append(T_B_Wd)
            times.append(time)
        return [tab_T_B_Wd, times]

    def moveAwayQ5Singularity(self, omega, T_B_Wd=None):
        self.updateTransformations()
        sector0 = self.getQ5Q6SpaceSector(self.q_r[5], self.q_r[6])
        sector0 = self.getQ5Q6SpaceSector(self.q_r[5], self.q_r[6])
        angle = 25.0/180.0*math.pi
        if T_B_Wd == None:
            if self.q_r[5] > 0.0:
                angle = 25.0/180.0*math.pi
            else:
                angle = -25.0/180.0*math.pi
            traj, times = self.generateTrajectoryInJoint(5, -self.q_r[5]+angle, omega)
        else:
            traj1, times1 = self.generateTrajectoryInJoint(5, -self.q_r[5]+angle, omega)
            traj2, times2 = self.generateTrajectoryInJoint(5, -self.q_r[5]-angle, omega)
            diff1 = PyKDL.diff(T_B_Wd,traj1[-1])
            diff2 = PyKDL.diff(T_B_Wd,traj2[-1])
            if diff1.rot.Norm() < diff2.rot.Norm():
                traj = traj1
                times = times1
            else:
                traj = traj2
                times = times2

        self.moveWrist2(traj[-1]*self.T_W_T)
        raw_input("Press Enter to move the robot in " + str(times[-1]) + " s...")
        if self.checkStopCondition():
            exit(0)
        self.moveWristTraj(traj, times, Wrench(Vector3(20,20,20), Vector3(4,4,4)), abort_on_q5_singularity=False)
        self.checkStopCondition(times[-1]+0.5)

    def generateTrajectoryInQ5Q6(self, q5, q6, omega):
        actual_q5 = copy.copy(self.q_r[5])
        actual_q6 = copy.copy(self.q_r[6])

        rel_q5 = q5 - actual_q5
        rel_q6 = q6 - actual_q6
        if math.fabs(rel_q5) > math.fabs(rel_q6):
            omega_q5 = math.fabs(omega)
            omega_q6 = math.fabs(omega)*math.fabs(rel_q6)/math.fabs(rel_q5)
        else:
            omega_q6 = math.fabs(omega)
            omega_q5 = math.fabs(omega)*math.fabs(rel_q5)/math.fabs(rel_q6)

        if rel_q5 < 0.0:
            omega_q5 = -omega_q5
        if rel_q6 < 0.0:
            omega_q6 = -omega_q6

        self.updateTransformations()
        T_L5_L6 = self.T_B_L[5].Inverse() * self.T_B_L[6]

        time_d = 0.01
        stop = False
        angle_q5 = 0.0
        angle_q6 = 0.0
        times = []
        time = 0.5
        tab_T_B_Wd = []
        while not stop:
            angle_q5 += omega_q5 * time_d
            angle_q6 += omega_q6 * time_d
            time += time_d
            if rel_q5 > 0.0 and angle_q5 > rel_q5:
                angle_q5 = rel_q5
                stop = True
            if rel_q5 < 0.0 and angle_q5 < rel_q5:
                angle_q5 = rel_q5
                stop = True

            if rel_q6 > 0.0 and angle_q6 > rel_q6:
                angle_q6 = rel_q6
                stop = True
            if rel_q6 < 0.0 and angle_q6 < rel_q6:
                angle_q6 = rel_q6
                stop = True

            T_L5_L5d = PyKDL.Frame(PyKDL.Rotation.RotY(angle_q5))
            T_L6_L6d = PyKDL.Frame(PyKDL.Rotation.RotZ(angle_q6))
            T_B_Wd = self.T_B_L[5] * T_L5_L5d * T_L5_L6 * T_L6_L6d
            tab_T_B_Wd.append(T_B_Wd)
            times.append(time)
        return [tab_T_B_Wd, times]

    def getAllDOFs(self):
        dofs = self.qt + self.qal + self.qhl + self.qar + self.qhr
        return dofs

    def switchToJoint(self):
        self.joint_impedance_active = True
        self.cartesian_impedance_active = False

    def switchToCart(self):
        self.joint_impedance_active = False
        self.cartesian_impedance_active = True

    def isJointImpedanceActive(self):
        if self.joint_impedance_active and not self.cartesian_impedance_active:
            return True
        return False

    def isCartesianImpedanceActive(self):
        if not self.joint_impedance_active and self.cartesian_impedance_active:
            return True
        return False


